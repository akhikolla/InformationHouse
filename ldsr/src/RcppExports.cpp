// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Kalman_smoother
List Kalman_smoother(arma::mat y, arma::mat u, arma::mat v, List theta, bool stdlik);
RcppExport SEXP _ldsr_Kalman_smoother(SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP thetaSEXP, SEXP stdlikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< List >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type stdlik(stdlikSEXP);
    rcpp_result_gen = Rcpp::wrap(Kalman_smoother(y, u, v, theta, stdlik));
    return rcpp_result_gen;
END_RCPP
}
// Mstep
List Mstep(arma::mat y, arma::mat u, arma::mat v, List fit);
RcppExport SEXP _ldsr_Mstep(SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< List >::type fit(fitSEXP);
    rcpp_result_gen = Rcpp::wrap(Mstep(y, u, v, fit));
    return rcpp_result_gen;
END_RCPP
}
// LDS_EM
List LDS_EM(arma::mat y, arma::mat u, arma::mat v, List theta0, int niter, double tol);
RcppExport SEXP _ldsr_LDS_EM(SEXP ySEXP, SEXP uSEXP, SEXP vSEXP, SEXP theta0SEXP, SEXP niterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< List >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(LDS_EM(y, u, v, theta0, niter, tol));
    return rcpp_result_gen;
END_RCPP
}
// propagate
List propagate(List theta, arma::mat u, arma::mat v, arma::mat y, bool stdlik);
RcppExport SEXP _ldsr_propagate(SEXP thetaSEXP, SEXP uSEXP, SEXP vSEXP, SEXP ySEXP, SEXP stdlikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type stdlik(stdlikSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate(theta, u, v, y, stdlik));
    return rcpp_result_gen;
END_RCPP
}
// NSE
double NSE(NumericVector yhat, NumericVector y);
RcppExport SEXP _ldsr_NSE(SEXP yhatSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yhat(yhatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(NSE(yhat, y));
    return rcpp_result_gen;
END_RCPP
}
// nRMSE
double nRMSE(NumericVector yhat, NumericVector y, double normConst);
RcppExport SEXP _ldsr_nRMSE(SEXP yhatSEXP, SEXP ySEXP, SEXP normConstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yhat(yhatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type normConst(normConstSEXP);
    rcpp_result_gen = Rcpp::wrap(nRMSE(yhat, y, normConst));
    return rcpp_result_gen;
END_RCPP
}
// corr
double corr(NumericVector x, NumericVector y);
RcppExport SEXP _ldsr_corr(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(corr(x, y));
    return rcpp_result_gen;
END_RCPP
}
// KGE
double KGE(NumericVector yhat, NumericVector y);
RcppExport SEXP _ldsr_KGE(SEXP yhatSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yhat(yhatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(KGE(yhat, y));
    return rcpp_result_gen;
END_RCPP
}
// RE
double RE(NumericVector yhat, NumericVector y, double yc_bar);
RcppExport SEXP _ldsr_RE(SEXP yhatSEXP, SEXP ySEXP, SEXP yc_barSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yhat(yhatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type yc_bar(yc_barSEXP);
    rcpp_result_gen = Rcpp::wrap(RE(yhat, y, yc_bar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldsr_Kalman_smoother", (DL_FUNC) &_ldsr_Kalman_smoother, 5},
    {"_ldsr_Mstep", (DL_FUNC) &_ldsr_Mstep, 4},
    {"_ldsr_LDS_EM", (DL_FUNC) &_ldsr_LDS_EM, 6},
    {"_ldsr_propagate", (DL_FUNC) &_ldsr_propagate, 5},
    {"_ldsr_NSE", (DL_FUNC) &_ldsr_NSE, 2},
    {"_ldsr_nRMSE", (DL_FUNC) &_ldsr_nRMSE, 3},
    {"_ldsr_corr", (DL_FUNC) &_ldsr_corr, 2},
    {"_ldsr_KGE", (DL_FUNC) &_ldsr_KGE, 2},
    {"_ldsr_RE", (DL_FUNC) &_ldsr_RE, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldsr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
