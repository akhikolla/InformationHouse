// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// HACWeightC
arma::colvec HACWeightC(int iLag);
RcppExport SEXP _DriftBurstHypothesis_HACWeightC(SEXP iLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iLag(iLagSEXP);
    rcpp_result_gen = Rcpp::wrap(HACWeightC(iLag));
    return rcpp_result_gen;
END_RCPP
}
// AsymptoticVarianceC
double AsymptoticVarianceC(const arma::colvec& vIn, int iLag);
RcppExport SEXP _DriftBurstHypothesis_AsymptoticVarianceC(SEXP vInSEXP, SEXP iLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vIn(vInSEXP);
    Rcpp::traits::input_parameter< int >::type iLag(iLagSEXP);
    rcpp_result_gen = Rcpp::wrap(AsymptoticVarianceC(vIn, iLag));
    return rcpp_result_gen;
END_RCPP
}
// AutomaticLagSelectionC
int AutomaticLagSelectionC(const arma::colvec& vX, double dMu);
RcppExport SEXP _DriftBurstHypothesis_AutomaticLagSelectionC(SEXP vXSEXP, SEXP dMuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vX(vXSEXP);
    Rcpp::traits::input_parameter< double >::type dMu(dMuSEXP);
    rcpp_result_gen = Rcpp::wrap(AutomaticLagSelectionC(vX, dMu));
    return rcpp_result_gen;
END_RCPP
}
// DriftBurstLoopC
Rcpp::List DriftBurstLoopC(const arma::colvec& vPreAveraged, const arma::colvec& diffedlogprices, const arma::colvec& vTime, const arma::colvec& vTesttime, double iMeanBandwidth, double iVarBandwidth, int iPreAverage, int iAcLag);
RcppExport SEXP _DriftBurstHypothesis_DriftBurstLoopC(SEXP vPreAveragedSEXP, SEXP diffedlogpricesSEXP, SEXP vTimeSEXP, SEXP vTesttimeSEXP, SEXP iMeanBandwidthSEXP, SEXP iVarBandwidthSEXP, SEXP iPreAverageSEXP, SEXP iAcLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vPreAveraged(vPreAveragedSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type diffedlogprices(diffedlogpricesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTime(vTimeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTesttime(vTesttimeSEXP);
    Rcpp::traits::input_parameter< double >::type iMeanBandwidth(iMeanBandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type iVarBandwidth(iVarBandwidthSEXP);
    Rcpp::traits::input_parameter< int >::type iPreAverage(iPreAverageSEXP);
    Rcpp::traits::input_parameter< int >::type iAcLag(iAcLagSEXP);
    rcpp_result_gen = Rcpp::wrap(DriftBurstLoopC(vPreAveraged, diffedlogprices, vTime, vTesttime, iMeanBandwidth, iVarBandwidth, iPreAverage, iAcLag));
    return rcpp_result_gen;
END_RCPP
}
// DriftBurstLoopCPAR
Rcpp::List DriftBurstLoopCPAR(const arma::colvec& vPreAveraged, const arma::colvec& diffedlogprices, const arma::colvec& vTime, const arma::colvec& vTesttime, double iMeanBandwidth, double iVarBandwidth, int iPreAverage, int iAcLag, int iCores);
RcppExport SEXP _DriftBurstHypothesis_DriftBurstLoopCPAR(SEXP vPreAveragedSEXP, SEXP diffedlogpricesSEXP, SEXP vTimeSEXP, SEXP vTesttimeSEXP, SEXP iMeanBandwidthSEXP, SEXP iVarBandwidthSEXP, SEXP iPreAverageSEXP, SEXP iAcLagSEXP, SEXP iCoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vPreAveraged(vPreAveragedSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type diffedlogprices(diffedlogpricesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTime(vTimeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTesttime(vTesttimeSEXP);
    Rcpp::traits::input_parameter< double >::type iMeanBandwidth(iMeanBandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type iVarBandwidth(iVarBandwidthSEXP);
    Rcpp::traits::input_parameter< int >::type iPreAverage(iPreAverageSEXP);
    Rcpp::traits::input_parameter< int >::type iAcLag(iAcLagSEXP);
    Rcpp::traits::input_parameter< int >::type iCores(iCoresSEXP);
    rcpp_result_gen = Rcpp::wrap(DriftBurstLoopCPAR(vPreAveraged, diffedlogprices, vTime, vTesttime, iMeanBandwidth, iVarBandwidth, iPreAverage, iAcLag, iCores));
    return rcpp_result_gen;
END_RCPP
}
// cfilter
arma::vec cfilter(arma::vec x, arma::vec filter);
RcppExport SEXP _DriftBurstHypothesis_cfilter(SEXP xSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(cfilter(x, filter));
    return rcpp_result_gen;
END_RCPP
}
// mldivide
arma::vec mldivide(arma::mat A, arma::vec B);
RcppExport SEXP _DriftBurstHypothesis_mldivide(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mldivide(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DriftBurstHypothesis_HACWeightC", (DL_FUNC) &_DriftBurstHypothesis_HACWeightC, 1},
    {"_DriftBurstHypothesis_AsymptoticVarianceC", (DL_FUNC) &_DriftBurstHypothesis_AsymptoticVarianceC, 2},
    {"_DriftBurstHypothesis_AutomaticLagSelectionC", (DL_FUNC) &_DriftBurstHypothesis_AutomaticLagSelectionC, 2},
    {"_DriftBurstHypothesis_DriftBurstLoopC", (DL_FUNC) &_DriftBurstHypothesis_DriftBurstLoopC, 8},
    {"_DriftBurstHypothesis_DriftBurstLoopCPAR", (DL_FUNC) &_DriftBurstHypothesis_DriftBurstLoopCPAR, 9},
    {"_DriftBurstHypothesis_cfilter", (DL_FUNC) &_DriftBurstHypothesis_cfilter, 2},
    {"_DriftBurstHypothesis_mldivide", (DL_FUNC) &_DriftBurstHypothesis_mldivide, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DriftBurstHypothesis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
