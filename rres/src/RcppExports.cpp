// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// process_snptext_cpp
List process_snptext_cpp(DataFrame df, int snpmajor, int maref, int inhaplo, int outallele, int outhaplo);
RcppExport SEXP _rres_process_snptext_cpp(SEXP dfSEXP, SEXP snpmajorSEXP, SEXP marefSEXP, SEXP inhaploSEXP, SEXP outalleleSEXP, SEXP outhaploSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type snpmajor(snpmajorSEXP);
    Rcpp::traits::input_parameter< int >::type maref(marefSEXP);
    Rcpp::traits::input_parameter< int >::type inhaplo(inhaploSEXP);
    Rcpp::traits::input_parameter< int >::type outallele(outalleleSEXP);
    Rcpp::traits::input_parameter< int >::type outhaplo(outhaploSEXP);
    rcpp_result_gen = Rcpp::wrap(process_snptext_cpp(df, snpmajor, maref, inhaplo, outallele, outhaplo));
    return rcpp_result_gen;
END_RCPP
}
// read_bed_cpp
IntegerMatrix read_bed_cpp(std::string file, int nind, int nsnp);
RcppExport SEXP _rres_read_bed_cpp(SEXP fileSEXP, SEXP nindSEXP, SEXP nsnpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type nind(nindSEXP);
    Rcpp::traits::input_parameter< int >::type nsnp(nsnpSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bed_cpp(file, nind, nsnp));
    return rcpp_result_gen;
END_RCPP
}
// twostep_grm_cpp
NumericMatrix twostep_grm_cpp(NumericMatrix genotype, NumericVector freq, NumericMatrix est0);
RcppExport SEXP _rres_twostep_grm_cpp(SEXP genotypeSEXP, SEXP freqSEXP, SEXP est0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type genotype(genotypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type est0(est0SEXP);
    rcpp_result_gen = Rcpp::wrap(twostep_grm_cpp(genotype, freq, est0));
    return rcpp_result_gen;
END_RCPP
}
// write_markers_cpp
void write_markers_cpp(NumericVector marker, NumericVector freq, NumericMatrix genotype, CharacterVector memberID, std::string outfile);
RcppExport SEXP _rres_write_markers_cpp(SEXP markerSEXP, SEXP freqSEXP, SEXP genotypeSEXP, SEXP memberIDSEXP, SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type marker(markerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type genotype(genotypeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type memberID(memberIDSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    write_markers_cpp(marker, freq, genotype, memberID, outfile);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rres_process_snptext_cpp", (DL_FUNC) &_rres_process_snptext_cpp, 6},
    {"_rres_read_bed_cpp", (DL_FUNC) &_rres_read_bed_cpp, 3},
    {"_rres_twostep_grm_cpp", (DL_FUNC) &_rres_twostep_grm_cpp, 3},
    {"_rres_write_markers_cpp", (DL_FUNC) &_rres_write_markers_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rres(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
