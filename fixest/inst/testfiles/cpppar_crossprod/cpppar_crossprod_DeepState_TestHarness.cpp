// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpppar_crossprod_DeepState_TestHarness_generation.cpp and cpppar_crossprod_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix cpppar_crossprod(NumericMatrix X, NumericVector w, int nthreads);

TEST(fixest_deepstate_test,cpppar_crossprod_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_crossprod/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  qs::c_qsave(w,"/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_crossprod/inputs/w.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector nthreads(1);
  nthreads[0]  = RcppDeepState_int();
  qs::c_qsave(nthreads,"/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_crossprod/inputs/nthreads.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nthreads values: "<< nthreads << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpppar_crossprod(X,w,nthreads[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
