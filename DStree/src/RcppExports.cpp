// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// hazard
List hazard(NumericVector y1, NumericVector y2, NumericVector lev, NumericVector wt);
RcppExport SEXP _DStree_hazard(SEXP y1SEXP, SEXP y2SEXP, SEXP levSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lev(levSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(hazard(y1, y2, lev, wt));
    return rcpp_result_gen;
END_RCPP
}
// hazardl
List hazardl(NumericVector y1, NumericVector y2, NumericVector lev, int ind, NumericVector wt);
RcppExport SEXP _DStree_hazardl(SEXP y1SEXP, SEXP y2SEXP, SEXP levSEXP, SEXP indSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lev(levSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(hazardl(y1, y2, lev, ind, wt));
    return rcpp_result_gen;
END_RCPP
}
// hazardr
List hazardr(NumericVector y1, NumericVector y2, NumericVector lev, int ind, NumericVector wt);
RcppExport SEXP _DStree_hazardr(SEXP y1SEXP, SEXP y2SEXP, SEXP levSEXP, SEXP indSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lev(levSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(hazardr(y1, y2, lev, ind, wt));
    return rcpp_result_gen;
END_RCPP
}
// lik
double lik(NumericVector S, NumericVector pi, NumericVector ncens, NumericVector nuncens);
RcppExport SEXP _DStree_lik(SEXP SSEXP, SEXP piSEXP, SEXP ncensSEXP, SEXP nuncensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ncens(ncensSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nuncens(nuncensSEXP);
    rcpp_result_gen = Rcpp::wrap(lik(S, pi, ncens, nuncens));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DStree_hazard", (DL_FUNC) &_DStree_hazard, 4},
    {"_DStree_hazardl", (DL_FUNC) &_DStree_hazardl, 5},
    {"_DStree_hazardr", (DL_FUNC) &_DStree_hazardr, 5},
    {"_DStree_lik", (DL_FUNC) &_DStree_lik, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_DStree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
