// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// hazardr_DeepState_TestHarness_generation.cpp and hazardr_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List hazardr(NumericVector y1, NumericVector y2, NumericVector lev, int ind, NumericVector wt);

TEST(DStree_deepstate_test,hazardr_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector y1  = RcppDeepState_NumericVector();
  qs::c_qsave(y1,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/hazardr/inputs/y1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y1 values: "<< y1 << std::endl;
  NumericVector y2  = RcppDeepState_NumericVector();
  qs::c_qsave(y2,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/hazardr/inputs/y2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y2 values: "<< y2 << std::endl;
  NumericVector lev  = RcppDeepState_NumericVector();
  qs::c_qsave(lev,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/hazardr/inputs/lev.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lev values: "<< lev << std::endl;
  IntegerVector ind(1);
  ind[0]  = RcppDeepState_int();
  qs::c_qsave(ind,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/hazardr/inputs/ind.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ind values: "<< ind << std::endl;
  NumericVector wt  = RcppDeepState_NumericVector();
  qs::c_qsave(wt,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/hazardr/inputs/wt.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wt values: "<< wt << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    hazardr(y1,y2,lev,ind[0],wt);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
