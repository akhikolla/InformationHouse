// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// lik_DeepState_TestHarness_generation.cpp and lik_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double lik(NumericVector S, NumericVector pi, NumericVector ncens, NumericVector nuncens);

TEST(DStree_deepstate_test,lik_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector S  = RcppDeepState_NumericVector();
  qs::c_qsave(S,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/lik/inputs/S.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "S values: "<< S << std::endl;
  NumericVector pi  = RcppDeepState_NumericVector();
  qs::c_qsave(pi,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/lik/inputs/pi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pi values: "<< pi << std::endl;
  NumericVector ncens  = RcppDeepState_NumericVector();
  qs::c_qsave(ncens,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/lik/inputs/ncens.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ncens values: "<< ncens << std::endl;
  NumericVector nuncens  = RcppDeepState_NumericVector();
  qs::c_qsave(nuncens,"/home/akhila/fuzzer_packages/fuzzedpackages/DStree/inst/testfiles/lik/inputs/nuncens.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nuncens values: "<< nuncens << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    lik(S,pi,ncens,nuncens);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
