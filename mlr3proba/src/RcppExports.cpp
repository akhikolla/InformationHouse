// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_get_unique_times
NumericVector c_get_unique_times(NumericVector true_times, NumericVector req_times);
RcppExport SEXP _mlr3proba_c_get_unique_times(SEXP true_timesSEXP, SEXP req_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type true_times(true_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type req_times(req_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_unique_times(true_times, req_times));
    return rcpp_result_gen;
END_RCPP
}
// c_score_intslogloss
NumericMatrix c_score_intslogloss(NumericMatrix truth, NumericVector unique_times, NumericMatrix cdf, double eps);
RcppExport SEXP _mlr3proba_c_score_intslogloss(SEXP truthSEXP, SEXP unique_timesSEXP, SEXP cdfSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unique_times(unique_timesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_score_intslogloss(truth, unique_times, cdf, eps));
    return rcpp_result_gen;
END_RCPP
}
// c_score_graf_schmid
NumericMatrix c_score_graf_schmid(NumericVector truth, NumericVector unique_times, NumericMatrix cdf, int power);
RcppExport SEXP _mlr3proba_c_score_graf_schmid(SEXP truthSEXP, SEXP unique_timesSEXP, SEXP cdfSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unique_times(unique_timesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(c_score_graf_schmid(truth, unique_times, cdf, power));
    return rcpp_result_gen;
END_RCPP
}
// c_weight_survival_score
NumericMatrix c_weight_survival_score(NumericMatrix score, NumericMatrix truth, NumericVector unique_times, NumericMatrix cens);
RcppExport SEXP _mlr3proba_c_weight_survival_score(SEXP scoreSEXP, SEXP truthSEXP, SEXP unique_timesSEXP, SEXP censSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unique_times(unique_timesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cens(censSEXP);
    rcpp_result_gen = Rcpp::wrap(c_weight_survival_score(score, truth, unique_times, cens));
    return rcpp_result_gen;
END_RCPP
}
// c_concordance
float c_concordance(NumericVector time, NumericVector status, NumericVector crank, double cutoff, std::string weight_meth, NumericMatrix cens, NumericMatrix surv, float tiex);
RcppExport SEXP _mlr3proba_c_concordance(SEXP timeSEXP, SEXP statusSEXP, SEXP crankSEXP, SEXP cutoffSEXP, SEXP weight_methSEXP, SEXP censSEXP, SEXP survSEXP, SEXP tiexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type crank(crankSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< std::string >::type weight_meth(weight_methSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cens(censSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type surv(survSEXP);
    Rcpp::traits::input_parameter< float >::type tiex(tiexSEXP);
    rcpp_result_gen = Rcpp::wrap(c_concordance(time, status, crank, cutoff, weight_meth, cens, surv, tiex));
    return rcpp_result_gen;
END_RCPP
}
// c_gonen
float c_gonen(NumericVector crank, float tiex);
RcppExport SEXP _mlr3proba_c_gonen(SEXP crankSEXP, SEXP tiexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type crank(crankSEXP);
    Rcpp::traits::input_parameter< float >::type tiex(tiexSEXP);
    rcpp_result_gen = Rcpp::wrap(c_gonen(crank, tiex));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlr3proba_c_get_unique_times", (DL_FUNC) &_mlr3proba_c_get_unique_times, 2},
    {"_mlr3proba_c_score_intslogloss", (DL_FUNC) &_mlr3proba_c_score_intslogloss, 4},
    {"_mlr3proba_c_score_graf_schmid", (DL_FUNC) &_mlr3proba_c_score_graf_schmid, 4},
    {"_mlr3proba_c_weight_survival_score", (DL_FUNC) &_mlr3proba_c_weight_survival_score, 4},
    {"_mlr3proba_c_concordance", (DL_FUNC) &_mlr3proba_c_concordance, 8},
    {"_mlr3proba_c_gonen", (DL_FUNC) &_mlr3proba_c_gonen, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlr3proba(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
