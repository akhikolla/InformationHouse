// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dijkstra_nodes
IntegerVector dijkstra_nodes(NumericMatrix dist, int src, NumericVector node_costs);
RcppExport SEXP _gretel_dijkstra_nodes(SEXP distSEXP, SEXP srcSEXP, SEXP node_costsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type src(srcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_costs(node_costsSEXP);
    rcpp_result_gen = Rcpp::wrap(dijkstra_nodes(dist, src, node_costs));
    return rcpp_result_gen;
END_RCPP
}
// dijkstra_inf
IntegerVector dijkstra_inf(NumericMatrix dist, int src);
RcppExport SEXP _gretel_dijkstra_inf(SEXP distSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type src(srcSEXP);
    rcpp_result_gen = Rcpp::wrap(dijkstra_inf(dist, src));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gretel_dijkstra_nodes", (DL_FUNC) &_gretel_dijkstra_nodes, 3},
    {"_gretel_dijkstra_inf", (DL_FUNC) &_gretel_dijkstra_inf, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gretel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
