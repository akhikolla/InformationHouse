// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// middle_frame
NumericVector middle_frame(String filename, NumericMatrix subtrahend, int threshold);
RcppExport SEXP _specklestar_middle_frame(SEXP filenameSEXP, SEXP subtrahendSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type subtrahend(subtrahendSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(middle_frame(filename, subtrahend, threshold));
    return rcpp_result_gen;
END_RCPP
}
// speckle_acf
NumericVector speckle_acf(NumericMatrix ps);
RcppExport SEXP _specklestar_speckle_acf(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(speckle_acf(ps));
    return rcpp_result_gen;
END_RCPP
}
// speckle_generator
NumericVector speckle_generator(double rho, double theta, double dm, double seeing, double speckle_sigma, double wind);
RcppExport SEXP _specklestar_speckle_generator(SEXP rhoSEXP, SEXP thetaSEXP, SEXP dmSEXP, SEXP seeingSEXP, SEXP speckle_sigmaSEXP, SEXP windSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< double >::type seeing(seeingSEXP);
    Rcpp::traits::input_parameter< double >::type speckle_sigma(speckle_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type wind(windSEXP);
    rcpp_result_gen = Rcpp::wrap(speckle_generator(rho, theta, dm, seeing, speckle_sigma, wind));
    return rcpp_result_gen;
END_RCPP
}
// speckle_ps
NumericVector speckle_ps(String filename, NumericMatrix dark, NumericMatrix flat, int threshold);
RcppExport SEXP _specklestar_speckle_ps(SEXP filenameSEXP, SEXP darkSEXP, SEXP flatSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dark(darkSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type flat(flatSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(speckle_ps(filename, dark, flat, threshold));
    return rcpp_result_gen;
END_RCPP
}
// speckle_ps_diff
NumericVector speckle_ps_diff(String filename, int threshold);
RcppExport SEXP _specklestar_speckle_ps_diff(SEXP filenameSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(speckle_ps_diff(filename, threshold));
    return rcpp_result_gen;
END_RCPP
}
// speckle_stat
List speckle_stat(String filename, int threshold);
RcppExport SEXP _specklestar_speckle_stat(SEXP filenameSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(speckle_stat(filename, threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_specklestar_middle_frame", (DL_FUNC) &_specklestar_middle_frame, 3},
    {"_specklestar_speckle_acf", (DL_FUNC) &_specklestar_speckle_acf, 1},
    {"_specklestar_speckle_generator", (DL_FUNC) &_specklestar_speckle_generator, 6},
    {"_specklestar_speckle_ps", (DL_FUNC) &_specklestar_speckle_ps, 4},
    {"_specklestar_speckle_ps_diff", (DL_FUNC) &_specklestar_speckle_ps_diff, 2},
    {"_specklestar_speckle_stat", (DL_FUNC) &_specklestar_speckle_stat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_specklestar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
