// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fill_vec
NumericVector fill_vec(NumericVector read_vec, NumericVector read_indices);
RcppExport SEXP _immunarch_fill_vec(SEXP read_vecSEXP, SEXP read_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type read_vec(read_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type read_indices(read_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_vec(read_vec, read_indices));
    return rcpp_result_gen;
END_RCPP
}
// fill_reads
NumericVector fill_reads(NumericVector new_reads, NumericVector new_counts);
RcppExport SEXP _immunarch_fill_reads(SEXP new_readsSEXP, SEXP new_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type new_reads(new_readsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_counts(new_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_reads(new_reads, new_counts));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_immunarch_fill_vec", (DL_FUNC) &_immunarch_fill_vec, 2},
    {"_immunarch_fill_reads", (DL_FUNC) &_immunarch_fill_reads, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_immunarch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
