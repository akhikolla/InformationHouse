// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// networkflow_DeepState_TestHarness_generation.cpp and networkflow_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List networkflow(NumericMatrix a, NumericMatrix b, NumericMatrix C, int threads);

TEST(transport_deepstate_test,networkflow_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix a  = RcppDeepState_NumericMatrix();
  qs::c_qsave(a,"/home/akhila/fuzzer_packages/fuzzedpackages/transport/inst/testfiles/networkflow/inputs/a.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericMatrix b  = RcppDeepState_NumericMatrix();
  qs::c_qsave(b,"/home/akhila/fuzzer_packages/fuzzedpackages/transport/inst/testfiles/networkflow/inputs/b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericMatrix C  = RcppDeepState_NumericMatrix();
  qs::c_qsave(C,"/home/akhila/fuzzer_packages/fuzzedpackages/transport/inst/testfiles/networkflow/inputs/C.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "C values: "<< C << std::endl;
  IntegerVector threads(1);
  threads[0]  = RcppDeepState_int();
  qs::c_qsave(threads,"/home/akhila/fuzzer_packages/fuzzedpackages/transport/inst/testfiles/networkflow/inputs/threads.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "threads values: "<< threads << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    networkflow(a,b,C,threads[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
