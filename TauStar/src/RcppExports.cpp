// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/TauStar.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// HoeffIndCdfRCPP
arma::vec HoeffIndCdfRCPP(arma::vec x, double maxError);
static SEXP _TauStar_HoeffIndCdfRCPP_try(SEXP xSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndCdfRCPP(x, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndCdfRCPP(SEXP xSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndCdfRCPP_try(xSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndPdfRCPP
arma::vec HoeffIndPdfRCPP(arma::vec x, double maxError);
static SEXP _TauStar_HoeffIndPdfRCPP_try(SEXP xSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndPdfRCPP(x, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndPdfRCPP(SEXP xSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndPdfRCPP_try(xSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// eigenForDiscreteProbs
arma::vec eigenForDiscreteProbs(arma::vec p);
static SEXP _TauStar_eigenForDiscreteProbs_try(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenForDiscreteProbs(p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_eigenForDiscreteProbs(SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_eigenForDiscreteProbs_try(pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndDiscreteCdfRCPP
arma::vec HoeffIndDiscreteCdfRCPP(arma::vec x, arma::vec eigenP, arma::vec eigenQ, double maxError);
static SEXP _TauStar_HoeffIndDiscreteCdfRCPP_try(SEXP xSEXP, SEXP eigenPSEXP, SEXP eigenQSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenP(eigenPSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenQ(eigenQSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndDiscreteCdfRCPP(x, eigenP, eigenQ, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndDiscreteCdfRCPP(SEXP xSEXP, SEXP eigenPSEXP, SEXP eigenQSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndDiscreteCdfRCPP_try(xSEXP, eigenPSEXP, eigenQSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndDiscretePdfRCPP
arma::vec HoeffIndDiscretePdfRCPP(arma::vec x, arma::vec eigenP, arma::vec eigenQ, double maxError);
static SEXP _TauStar_HoeffIndDiscretePdfRCPP_try(SEXP xSEXP, SEXP eigenPSEXP, SEXP eigenQSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenP(eigenPSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenQ(eigenQSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndDiscretePdfRCPP(x, eigenP, eigenQ, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndDiscretePdfRCPP(SEXP xSEXP, SEXP eigenPSEXP, SEXP eigenQSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndDiscretePdfRCPP_try(xSEXP, eigenPSEXP, eigenQSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndMixedCdfRCPP
arma::vec HoeffIndMixedCdfRCPP(arma::vec x, arma::vec eigenP, double maxError);
static SEXP _TauStar_HoeffIndMixedCdfRCPP_try(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenP(eigenPSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndMixedCdfRCPP(x, eigenP, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndMixedCdfRCPP(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndMixedCdfRCPP_try(xSEXP, eigenPSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndMixedPdfRCPP
arma::vec HoeffIndMixedPdfRCPP(arma::vec x, arma::vec eigenP, double maxError);
static SEXP _TauStar_HoeffIndMixedPdfRCPP_try(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenP(eigenPSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndMixedPdfRCPP(x, eigenP, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_HoeffIndMixedPdfRCPP(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_HoeffIndMixedPdfRCPP_try(xSEXP, eigenPSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// TStarHellerAndHellerRCPP
double TStarHellerAndHellerRCPP(const arma::vec& x, const arma::vec& y);
static SEXP _TauStar_TStarHellerAndHellerRCPP_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(TStarHellerAndHellerRCPP(x, y));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_TStarHellerAndHellerRCPP(SEXP xSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_TStarHellerAndHellerRCPP_try(xSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// VTStarHellerAndHellerRCPP
double VTStarHellerAndHellerRCPP(const arma::vec& x, const arma::vec& y);
static SEXP _TauStar_VTStarHellerAndHellerRCPP_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(VTStarHellerAndHellerRCPP(x, y));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_VTStarHellerAndHellerRCPP(SEXP xSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_VTStarHellerAndHellerRCPP_try(xSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// TStarWeihsEtAlRCPP
Rcpp::NumericVector TStarWeihsEtAlRCPP(NumericVector xNumeric, NumericVector yNumeric);
static SEXP _TauStar_TStarWeihsEtAlRCPP_try(SEXP xNumericSEXP, SEXP yNumericSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xNumeric(xNumericSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yNumeric(yNumericSEXP);
    rcpp_result_gen = Rcpp::wrap(TStarWeihsEtAlRCPP(xNumeric, yNumeric));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_TStarWeihsEtAlRCPP(SEXP xNumericSEXP, SEXP yNumericSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_TStarWeihsEtAlRCPP_try(xNumericSEXP, yNumericSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// VTStarWeihsEtAlRCPP
Rcpp::NumericVector VTStarWeihsEtAlRCPP(NumericVector xNumeric, NumericVector yNumeric);
static SEXP _TauStar_VTStarWeihsEtAlRCPP_try(SEXP xNumericSEXP, SEXP yNumericSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xNumeric(xNumericSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yNumeric(yNumericSEXP);
    rcpp_result_gen = Rcpp::wrap(VTStarWeihsEtAlRCPP(xNumeric, yNumeric));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_VTStarWeihsEtAlRCPP(SEXP xNumericSEXP, SEXP yNumericSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_VTStarWeihsEtAlRCPP_try(xNumericSEXP, yNumericSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// TStarFastResampleRCPP
Rcpp::NumericVector TStarFastResampleRCPP(NumericVector xNumeric, NumericVector yNumeric, int numResamples, int sampleSize);
static SEXP _TauStar_TStarFastResampleRCPP_try(SEXP xNumericSEXP, SEXP yNumericSEXP, SEXP numResamplesSEXP, SEXP sampleSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xNumeric(xNumericSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yNumeric(yNumericSEXP);
    Rcpp::traits::input_parameter< int >::type numResamples(numResamplesSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(TStarFastResampleRCPP(xNumeric, yNumeric, numResamples, sampleSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_TStarFastResampleRCPP(SEXP xNumericSEXP, SEXP yNumericSEXP, SEXP numResamplesSEXP, SEXP sampleSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_TStarFastResampleRCPP_try(xNumericSEXP, yNumericSEXP, numResamplesSEXP, sampleSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// TStarNaiveRCPP
Rcpp::NumericVector TStarNaiveRCPP(NumericVector x, NumericVector y, bool vStat);
static SEXP _TauStar_TStarNaiveRCPP_try(SEXP xSEXP, SEXP ySEXP, SEXP vStatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type vStat(vStatSEXP);
    rcpp_result_gen = Rcpp::wrap(TStarNaiveRCPP(x, y, vStat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _TauStar_TStarNaiveRCPP(SEXP xSEXP, SEXP ySEXP, SEXP vStatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_TauStar_TStarNaiveRCPP_try(xSEXP, ySEXP, vStatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _TauStar_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*HoeffIndCdfRCPP)(arma::vec,double)");
        signatures.insert("arma::vec(*HoeffIndPdfRCPP)(arma::vec,double)");
        signatures.insert("arma::vec(*eigenForDiscreteProbs)(arma::vec)");
        signatures.insert("arma::vec(*HoeffIndDiscreteCdfRCPP)(arma::vec,arma::vec,arma::vec,double)");
        signatures.insert("arma::vec(*HoeffIndDiscretePdfRCPP)(arma::vec,arma::vec,arma::vec,double)");
        signatures.insert("arma::vec(*HoeffIndMixedCdfRCPP)(arma::vec,arma::vec,double)");
        signatures.insert("arma::vec(*HoeffIndMixedPdfRCPP)(arma::vec,arma::vec,double)");
        signatures.insert("double(*TStarHellerAndHellerRCPP)(const arma::vec&,const arma::vec&)");
        signatures.insert("double(*VTStarHellerAndHellerRCPP)(const arma::vec&,const arma::vec&)");
        signatures.insert("Rcpp::NumericVector(*TStarWeihsEtAlRCPP)(NumericVector,NumericVector)");
        signatures.insert("Rcpp::NumericVector(*VTStarWeihsEtAlRCPP)(NumericVector,NumericVector)");
        signatures.insert("Rcpp::NumericVector(*TStarFastResampleRCPP)(NumericVector,NumericVector,int,int)");
        signatures.insert("Rcpp::NumericVector(*TStarNaiveRCPP)(NumericVector,NumericVector,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _TauStar_RcppExport_registerCCallable() { 
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndCdfRCPP", (DL_FUNC)_TauStar_HoeffIndCdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndPdfRCPP", (DL_FUNC)_TauStar_HoeffIndPdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_eigenForDiscreteProbs", (DL_FUNC)_TauStar_eigenForDiscreteProbs_try);
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndDiscreteCdfRCPP", (DL_FUNC)_TauStar_HoeffIndDiscreteCdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndDiscretePdfRCPP", (DL_FUNC)_TauStar_HoeffIndDiscretePdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndMixedCdfRCPP", (DL_FUNC)_TauStar_HoeffIndMixedCdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_HoeffIndMixedPdfRCPP", (DL_FUNC)_TauStar_HoeffIndMixedPdfRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_TStarHellerAndHellerRCPP", (DL_FUNC)_TauStar_TStarHellerAndHellerRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_VTStarHellerAndHellerRCPP", (DL_FUNC)_TauStar_VTStarHellerAndHellerRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_TStarWeihsEtAlRCPP", (DL_FUNC)_TauStar_TStarWeihsEtAlRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_VTStarWeihsEtAlRCPP", (DL_FUNC)_TauStar_VTStarWeihsEtAlRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_TStarFastResampleRCPP", (DL_FUNC)_TauStar_TStarFastResampleRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_TStarNaiveRCPP", (DL_FUNC)_TauStar_TStarNaiveRCPP_try);
    R_RegisterCCallable("TauStar", "_TauStar_RcppExport_validate", (DL_FUNC)_TauStar_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_TauStar_HoeffIndCdfRCPP", (DL_FUNC) &_TauStar_HoeffIndCdfRCPP, 2},
    {"_TauStar_HoeffIndPdfRCPP", (DL_FUNC) &_TauStar_HoeffIndPdfRCPP, 2},
    {"_TauStar_eigenForDiscreteProbs", (DL_FUNC) &_TauStar_eigenForDiscreteProbs, 1},
    {"_TauStar_HoeffIndDiscreteCdfRCPP", (DL_FUNC) &_TauStar_HoeffIndDiscreteCdfRCPP, 4},
    {"_TauStar_HoeffIndDiscretePdfRCPP", (DL_FUNC) &_TauStar_HoeffIndDiscretePdfRCPP, 4},
    {"_TauStar_HoeffIndMixedCdfRCPP", (DL_FUNC) &_TauStar_HoeffIndMixedCdfRCPP, 3},
    {"_TauStar_HoeffIndMixedPdfRCPP", (DL_FUNC) &_TauStar_HoeffIndMixedPdfRCPP, 3},
    {"_TauStar_TStarHellerAndHellerRCPP", (DL_FUNC) &_TauStar_TStarHellerAndHellerRCPP, 2},
    {"_TauStar_VTStarHellerAndHellerRCPP", (DL_FUNC) &_TauStar_VTStarHellerAndHellerRCPP, 2},
    {"_TauStar_TStarWeihsEtAlRCPP", (DL_FUNC) &_TauStar_TStarWeihsEtAlRCPP, 2},
    {"_TauStar_VTStarWeihsEtAlRCPP", (DL_FUNC) &_TauStar_VTStarWeihsEtAlRCPP, 2},
    {"_TauStar_TStarFastResampleRCPP", (DL_FUNC) &_TauStar_TStarFastResampleRCPP, 4},
    {"_TauStar_TStarNaiveRCPP", (DL_FUNC) &_TauStar_TStarNaiveRCPP, 3},
    {"_TauStar_RcppExport_registerCCallable", (DL_FUNC) &_TauStar_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_TauStar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
