// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Beta_C_DeepState_TestHarness_generation.cpp and Beta_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix Beta_C(NumericMatrix kappa, NumericMatrix beta, NumericMatrix X, NumericMatrix Y, double lambda_beta, NumericMatrix lambda_beta_mat, double convergence, int maxit);

TEST(graphicalVAR_deepstate_test,Beta_C_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix kappa  = RcppDeepState_NumericMatrix();
  qs::c_qsave(kappa,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/kappa.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kappa values: "<< kappa << std::endl;
  NumericMatrix beta  = RcppDeepState_NumericMatrix();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  qs::c_qsave(Y,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/Y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector lambda_beta(1);
  lambda_beta[0]  = RcppDeepState_double();
  qs::c_qsave(lambda_beta,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/lambda_beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_beta values: "<< lambda_beta << std::endl;
  NumericMatrix lambda_beta_mat  = RcppDeepState_NumericMatrix();
  qs::c_qsave(lambda_beta_mat,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/lambda_beta_mat.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_beta_mat values: "<< lambda_beta_mat << std::endl;
  NumericVector convergence(1);
  convergence[0]  = RcppDeepState_double();
  qs::c_qsave(convergence,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/convergence.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "convergence values: "<< convergence << std::endl;
  IntegerVector maxit(1);
  maxit[0]  = RcppDeepState_int();
  qs::c_qsave(maxit,"/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/inputs/maxit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxit values: "<< maxit << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Beta_C(kappa,beta,X,Y,lambda_beta[0],lambda_beta_mat,convergence[0],maxit[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
