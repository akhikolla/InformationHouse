// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// coreFromDist_DeepState_TestHarness_generation.cpp and coreFromDist_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector coreFromDist(const NumericVector dist, const int n, const int minPts);

TEST(dbscan_deepstate_test,coreFromDist_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector dist  = RcppDeepState_NumericVector();
  qs::c_qsave(dist,"/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/coreFromDist/inputs/dist.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dist values: "<< dist << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/coreFromDist/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector minPts(1);
  minPts[0]  = RcppDeepState_int();
  qs::c_qsave(minPts,"/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/coreFromDist/inputs/minPts.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minPts values: "<< minPts << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    coreFromDist(dist,n[0],minPts[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
