// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// IsingProcess_DeepState_TestHarness_generation.cpp and IsingProcess_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerMatrix IsingProcess(int nSample, NumericMatrix graph, NumericVector thresholds, double beta, IntegerVector responses);

TEST(IsingSampler_deepstate_test,IsingProcess_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector nSample(1);
  nSample[0]  = RcppDeepState_int();
  qs::c_qsave(nSample,"/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/IsingProcess/inputs/nSample.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nSample values: "<< nSample << std::endl;
  NumericMatrix graph  = RcppDeepState_NumericMatrix();
  qs::c_qsave(graph,"/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/IsingProcess/inputs/graph.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "graph values: "<< graph << std::endl;
  NumericVector thresholds  = RcppDeepState_NumericVector();
  qs::c_qsave(thresholds,"/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/IsingProcess/inputs/thresholds.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thresholds values: "<< thresholds << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/IsingProcess/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  IntegerVector responses  = RcppDeepState_IntegerVector();
  qs::c_qsave(responses,"/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/IsingProcess/inputs/responses.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "responses values: "<< responses << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    IsingProcess(nSample[0],graph,thresholds,beta[0],responses);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
