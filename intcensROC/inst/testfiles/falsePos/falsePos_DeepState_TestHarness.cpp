// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// falsePos_DeepState_TestHarness_generation.cpp and falsePos_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double falsePos(NumericVector thetaTmp, double m, double max_m, double t, NumericVector KnotI, NumericVector KnotM);

TEST(intcensROC_deepstate_test,falsePos_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector thetaTmp  = RcppDeepState_NumericVector();
  qs::c_qsave(thetaTmp,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/thetaTmp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thetaTmp values: "<< thetaTmp << std::endl;
  NumericVector m(1);
  m[0]  = RcppDeepState_double();
  qs::c_qsave(m,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/m.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  NumericVector max_m(1);
  max_m[0]  = RcppDeepState_double();
  qs::c_qsave(max_m,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/max_m.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_m values: "<< max_m << std::endl;
  NumericVector t(1);
  t[0]  = RcppDeepState_double();
  qs::c_qsave(t,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "t values: "<< t << std::endl;
  NumericVector KnotI  = RcppDeepState_NumericVector();
  qs::c_qsave(KnotI,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/KnotI.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KnotI values: "<< KnotI << std::endl;
  NumericVector KnotM  = RcppDeepState_NumericVector();
  qs::c_qsave(KnotM,"/home/akhila/fuzzer_packages/fuzzedpackages/intcensROC/inst/testfiles/falsePos/inputs/KnotM.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KnotM values: "<< KnotM << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    falsePos(thetaTmp,m[0],max_m[0],t[0],KnotI,KnotM);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
