// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// add_torows
arma::mat add_torows(const arma::mat& x, const arma::rowvec& v);
RcppExport SEXP _MESS_add_torows(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(add_torows(x, v));
    return rcpp_result_gen;
END_RCPP
}
// bin
List bin(NumericVector x, double width, double origin, bool missinglast);
RcppExport SEXP _MESS_bin(SEXP xSEXP, SEXP widthSEXP, SEXP originSEXP, SEXP missinglastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type origin(originSEXP);
    Rcpp::traits::input_parameter< bool >::type missinglast(missinglastSEXP);
    rcpp_result_gen = Rcpp::wrap(bin(x, width, origin, missinglast));
    return rcpp_result_gen;
END_RCPP
}
// chisq_test_cpp
List chisq_test_cpp(NumericMatrix x, int margin, int statistic, int B);
RcppExport SEXP _MESS_chisq_test_cpp(SEXP xSEXP, SEXP marginSEXP, SEXP statisticSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< int >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_test_cpp(x, margin, statistic, B));
    return rcpp_result_gen;
END_RCPP
}
// cmd
double cmd(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _MESS_cmd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cmd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// colCumSum
NumericMatrix colCumSum(NumericMatrix m);
RcppExport SEXP _MESS_colCumSum(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(colCumSum(m));
    return rcpp_result_gen;
END_RCPP
}
// cumsumbinning
IntegerVector cumsumbinning(NumericVector x, double threshold, bool cutwhenpassed, Rcpp::Nullable<int> maxgroupsize);
RcppExport SEXP _MESS_cumsumbinning(SEXP xSEXP, SEXP thresholdSEXP, SEXP cutwhenpassedSEXP, SEXP maxgroupsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type cutwhenpassed(cutwhenpassedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type maxgroupsize(maxgroupsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsumbinning(x, threshold, cutwhenpassed, maxgroupsize));
    return rcpp_result_gen;
END_RCPP
}
// dCov
double dCov(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _MESS_dCov(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dCov(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dCor
double dCor(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _MESS_dCor(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dCor(x, y));
    return rcpp_result_gen;
END_RCPP
}
// filldown
SEXP filldown(SEXP x);
RcppExport SEXP _MESS_filldown(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(filldown(x));
    return rcpp_result_gen;
END_RCPP
}
// hwe_frequencies
List hwe_frequencies(IntegerVector allele1, IntegerVector allele2, int min_alleles);
RcppExport SEXP _MESS_hwe_frequencies(SEXP allele1SEXP, SEXP allele2SEXP, SEXP min_allelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type allele1(allele1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type allele2(allele2SEXP);
    Rcpp::traits::input_parameter< int >::type min_alleles(min_allelesSEXP);
    rcpp_result_gen = Rcpp::wrap(hwe_frequencies(allele1, allele2, min_alleles));
    return rcpp_result_gen;
END_RCPP
}
// ks_cumtest
List ks_cumtest(NumericVector x, int B, Rcpp::Nullable<Rcpp::NumericVector> prob);
RcppExport SEXP _MESS_ks_cumtest(SEXP xSEXP, SEXP BSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ks_cumtest(x, B, prob));
    return rcpp_result_gen;
END_RCPP
}
// maximum_subarray
List maximum_subarray(const arma::vec& x);
RcppExport SEXP _MESS_maximum_subarray(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(maximum_subarray(x));
    return rcpp_result_gen;
END_RCPP
}
// mfastLmCpp
DataFrame mfastLmCpp(NumericVector y, NumericMatrix x, bool addintercept);
RcppExport SEXP _MESS_mfastLmCpp(SEXP ySEXP, SEXP xSEXP, SEXP addinterceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type addintercept(addinterceptSEXP);
    rcpp_result_gen = Rcpp::wrap(mfastLmCpp(y, x, addintercept));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_Schur_product
NumericMatrix pairwise_Schur_product(NumericMatrix x, bool self);
RcppExport SEXP _MESS_pairwise_Schur_product(SEXP xSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_Schur_product(x, self));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_combination_indices
NumericMatrix pairwise_combination_indices(unsigned long n, bool self);
RcppExport SEXP _MESS_pairwise_combination_indices(SEXP nSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_combination_indices(n, self));
    return rcpp_result_gen;
END_RCPP
}
// qdiag
NumericVector qdiag(const NumericMatrix& x);
RcppExport SEXP _MESS_qdiag(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(qdiag(x));
    return rcpp_result_gen;
END_RCPP
}
// quadform
NumericMatrix quadform(NumericMatrix x, NumericMatrix M, bool invertM, bool transposex);
RcppExport SEXP _MESS_quadform(SEXP xSEXP, SEXP MSEXP, SEXP invertMSEXP, SEXP transposexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type invertM(invertMSEXP);
    Rcpp::traits::input_parameter< bool >::type transposex(transposexSEXP);
    rcpp_result_gen = Rcpp::wrap(quadform(x, M, invertM, transposex));
    return rcpp_result_gen;
END_RCPP
}
// repmat
NumericMatrix repmat(NumericMatrix x, int nrow, int ncol);
RcppExport SEXP _MESS_repmat(SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(repmat(x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// tracemp
double tracemp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _MESS_tracemp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(tracemp(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MESS_add_torows", (DL_FUNC) &_MESS_add_torows, 2},
    {"_MESS_bin", (DL_FUNC) &_MESS_bin, 4},
    {"_MESS_chisq_test_cpp", (DL_FUNC) &_MESS_chisq_test_cpp, 4},
    {"_MESS_cmd", (DL_FUNC) &_MESS_cmd, 2},
    {"_MESS_colCumSum", (DL_FUNC) &_MESS_colCumSum, 1},
    {"_MESS_cumsumbinning", (DL_FUNC) &_MESS_cumsumbinning, 4},
    {"_MESS_dCov", (DL_FUNC) &_MESS_dCov, 2},
    {"_MESS_dCor", (DL_FUNC) &_MESS_dCor, 2},
    {"_MESS_filldown", (DL_FUNC) &_MESS_filldown, 1},
    {"_MESS_hwe_frequencies", (DL_FUNC) &_MESS_hwe_frequencies, 3},
    {"_MESS_ks_cumtest", (DL_FUNC) &_MESS_ks_cumtest, 3},
    {"_MESS_maximum_subarray", (DL_FUNC) &_MESS_maximum_subarray, 1},
    {"_MESS_mfastLmCpp", (DL_FUNC) &_MESS_mfastLmCpp, 3},
    {"_MESS_pairwise_Schur_product", (DL_FUNC) &_MESS_pairwise_Schur_product, 2},
    {"_MESS_pairwise_combination_indices", (DL_FUNC) &_MESS_pairwise_combination_indices, 2},
    {"_MESS_qdiag", (DL_FUNC) &_MESS_qdiag, 1},
    {"_MESS_quadform", (DL_FUNC) &_MESS_quadform, 4},
    {"_MESS_repmat", (DL_FUNC) &_MESS_repmat, 3},
    {"_MESS_tracemp", (DL_FUNC) &_MESS_tracemp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MESS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
