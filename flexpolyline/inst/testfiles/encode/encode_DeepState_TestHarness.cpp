// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// encode_DeepState_TestHarness_generation.cpp and encode_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

String encode(NumericMatrix line, int precision, int third_dim, int third_dim_precision);

TEST(flexpolyline_deepstate_test,encode_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix line  = RcppDeepState_NumericMatrix();
  qs::c_qsave(line,"/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/inputs/line.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "line values: "<< line << std::endl;
  IntegerVector precision(1);
  precision[0]  = RcppDeepState_int();
  qs::c_qsave(precision,"/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/inputs/precision.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "precision values: "<< precision << std::endl;
  IntegerVector third_dim(1);
  third_dim[0]  = RcppDeepState_int();
  qs::c_qsave(third_dim,"/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/inputs/third_dim.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "third_dim values: "<< third_dim << std::endl;
  IntegerVector third_dim_precision(1);
  third_dim_precision[0]  = RcppDeepState_int();
  qs::c_qsave(third_dim_precision,"/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/inputs/third_dim_precision.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "third_dim_precision values: "<< third_dim_precision << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    encode(line,precision[0],third_dim[0],third_dim_precision[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
