// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// funcSimX
NumericMatrix funcSimX(NumericVector coef, NumericMatrix buffMat);
RcppExport SEXP _unsystation_funcSimX(SEXP coefSEXP, SEXP buffMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type buffMat(buffMatSEXP);
    rcpp_result_gen = Rcpp::wrap(funcSimX(coef, buffMat));
    return rcpp_result_gen;
END_RCPP
}
// func_coef
NumericVector func_coef(NumericVector z, int scale);
RcppExport SEXP _unsystation_func_coef(SEXP zSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(func_coef(z, scale));
    return rcpp_result_gen;
END_RCPP
}
// funcSEMat
NumericMatrix funcSEMat(int T, int minLength, NumericVector probVec, IntegerVector topCand, IntegerVector bottomCand);
RcppExport SEXP _unsystation_funcSEMat(SEXP TSEXP, SEXP minLengthSEXP, SEXP probVecSEXP, SEXP topCandSEXP, SEXP bottomCandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type minLength(minLengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probVec(probVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type topCand(topCandSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bottomCand(bottomCandSEXP);
    rcpp_result_gen = Rcpp::wrap(funcSEMat(T, minLength, probVec, topCand, bottomCand));
    return rcpp_result_gen;
END_RCPP
}
// funcRes
List funcRes(NumericMatrix yMat, int M, int minLength, NumericVector probVec, IntegerVector topCand, IntegerVector bottomCand, NumericVector var);
RcppExport SEXP _unsystation_funcRes(SEXP yMatSEXP, SEXP MSEXP, SEXP minLengthSEXP, SEXP probVecSEXP, SEXP topCandSEXP, SEXP bottomCandSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type minLength(minLengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probVec(probVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type topCand(topCandSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bottomCand(bottomCandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(funcRes(yMat, M, minLength, probVec, topCand, bottomCand, var));
    return rcpp_result_gen;
END_RCPP
}
// funcResVar
NumericMatrix funcResVar(NumericMatrix yMat, NumericMatrix seMat, NumericVector tmpVar);
RcppExport SEXP _unsystation_funcResVar(SEXP yMatSEXP, SEXP seMatSEXP, SEXP tmpVarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type seMat(seMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tmpVar(tmpVarSEXP);
    rcpp_result_gen = Rcpp::wrap(funcResVar(yMat, seMat, tmpVar));
    return rcpp_result_gen;
END_RCPP
}
// funcApplyVar
NumericMatrix funcApplyVar(NumericMatrix nullStatMat, int maxLevel, int Msq);
RcppExport SEXP _unsystation_funcApplyVar(SEXP nullStatMatSEXP, SEXP maxLevelSEXP, SEXP MsqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type nullStatMat(nullStatMatSEXP);
    Rcpp::traits::input_parameter< int >::type maxLevel(maxLevelSEXP);
    Rcpp::traits::input_parameter< int >::type Msq(MsqSEXP);
    rcpp_result_gen = Rcpp::wrap(funcApplyVar(nullStatMat, maxLevel, Msq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_unsystation_funcSimX", (DL_FUNC) &_unsystation_funcSimX, 2},
    {"_unsystation_func_coef", (DL_FUNC) &_unsystation_func_coef, 2},
    {"_unsystation_funcSEMat", (DL_FUNC) &_unsystation_funcSEMat, 5},
    {"_unsystation_funcRes", (DL_FUNC) &_unsystation_funcRes, 7},
    {"_unsystation_funcResVar", (DL_FUNC) &_unsystation_funcResVar, 3},
    {"_unsystation_funcApplyVar", (DL_FUNC) &_unsystation_funcApplyVar, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_unsystation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
