// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// doubleloop_DeepState_TestHarness_generation.cpp and doubleloop_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix doubleloop(NumericMatrix K1R, NumericMatrix K2R, NumericMatrix P0R, NumericMatrix AR, NumericMatrix U1R, NumericMatrix wR, NumericVector LamdasR, int nminuspx, NumericVector all_rho, NumericMatrix LR0_allRhoR);

TEST(CKLRT_deepstate_test,doubleloop_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix K1R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(K1R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/K1R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K1R values: "<< K1R << std::endl;
  NumericMatrix K2R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(K2R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/K2R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K2R values: "<< K2R << std::endl;
  NumericMatrix P0R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(P0R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/P0R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "P0R values: "<< P0R << std::endl;
  NumericMatrix AR  = RcppDeepState_NumericMatrix();
  qs::c_qsave(AR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/AR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AR values: "<< AR << std::endl;
  NumericMatrix U1R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(U1R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/U1R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "U1R values: "<< U1R << std::endl;
  NumericMatrix wR  = RcppDeepState_NumericMatrix();
  qs::c_qsave(wR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/wR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wR values: "<< wR << std::endl;
  NumericVector LamdasR  = RcppDeepState_NumericVector();
  qs::c_qsave(LamdasR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/LamdasR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LamdasR values: "<< LamdasR << std::endl;
  IntegerVector nminuspx(1);
  nminuspx[0]  = RcppDeepState_int();
  qs::c_qsave(nminuspx,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/nminuspx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nminuspx values: "<< nminuspx << std::endl;
  NumericVector all_rho  = RcppDeepState_NumericVector();
  qs::c_qsave(all_rho,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/all_rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "all_rho values: "<< all_rho << std::endl;
  NumericMatrix LR0_allRhoR  = RcppDeepState_NumericMatrix();
  qs::c_qsave(LR0_allRhoR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop/inputs/LR0_allRhoR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LR0_allRhoR values: "<< LR0_allRhoR << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    doubleloop(K1R,K2R,P0R,AR,U1R,wR,LamdasR,nminuspx[0],all_rho,LR0_allRhoR);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
