// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// LR0_fixRho_C_DeepState_TestHarness_generation.cpp and LR0_fixRho_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix LR0_fixRho_C(NumericVector LamdasR, NumericVector muR, NumericMatrix w1R, NumericMatrix w2R, int nminuspx);

TEST(CKLRT_deepstate_test,LR0_fixRho_C_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector LamdasR  = RcppDeepState_NumericVector();
  qs::c_qsave(LamdasR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/LR0_fixRho_C/inputs/LamdasR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LamdasR values: "<< LamdasR << std::endl;
  NumericVector muR  = RcppDeepState_NumericVector();
  qs::c_qsave(muR,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/LR0_fixRho_C/inputs/muR.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "muR values: "<< muR << std::endl;
  NumericMatrix w1R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(w1R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/LR0_fixRho_C/inputs/w1R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w1R values: "<< w1R << std::endl;
  NumericMatrix w2R  = RcppDeepState_NumericMatrix();
  qs::c_qsave(w2R,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/LR0_fixRho_C/inputs/w2R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w2R values: "<< w2R << std::endl;
  IntegerVector nminuspx(1);
  nminuspx[0]  = RcppDeepState_int();
  qs::c_qsave(nminuspx,"/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/LR0_fixRho_C/inputs/nminuspx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nminuspx values: "<< nminuspx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    LR0_fixRho_C(LamdasR,muR,w1R,w2R,nminuspx[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
