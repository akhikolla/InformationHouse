// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// immer_latent_regression_calc_mu_sigma_DeepState_TestHarness_generation.cpp and immer_latent_regression_calc_mu_sigma_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List immer_latent_regression_calc_mu_sigma(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector beta, Rcpp::NumericVector gamma);

TEST(immer_deepstate_test,immer_latent_regression_calc_mu_sigma_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/immer_latent_regression_calc_mu_sigma/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  IntegerVector group  = RcppDeepState_IntegerVector();
  qs::c_qsave(group,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/immer_latent_regression_calc_mu_sigma/inputs/group.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "group values: "<< group << std::endl;
  IntegerVector G(1);
  G[0]  = RcppDeepState_int();
  qs::c_qsave(G,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/immer_latent_regression_calc_mu_sigma/inputs/G.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G values: "<< G << std::endl;
  NumericVector beta  = RcppDeepState_NumericVector();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/immer_latent_regression_calc_mu_sigma/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector gamma  = RcppDeepState_NumericVector();
  qs::c_qsave(gamma,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/immer_latent_regression_calc_mu_sigma/inputs/gamma.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    immer_latent_regression_calc_mu_sigma(X,group,G[0],beta,gamma);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
