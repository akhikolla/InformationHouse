// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// probs_hrm_rcpp_DeepState_TestHarness_generation.cpp and probs_hrm_rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);

TEST(immer_deepstate_test,probs_hrm_rcpp_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector xi  = RcppDeepState_NumericVector();
  qs::c_qsave(xi,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/xi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xi values: "<< xi << std::endl;
  NumericVector phi  = RcppDeepState_NumericVector();
  qs::c_qsave(phi,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/phi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  NumericVector psi  = RcppDeepState_NumericVector();
  qs::c_qsave(psi,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/psi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psi values: "<< psi << std::endl;
  IntegerVector K(1);
  K[0]  = RcppDeepState_int();
  qs::c_qsave(K,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/K.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  NumericVector x_ind  = RcppDeepState_NumericVector();
  qs::c_qsave(x_ind,"/home/akhila/fuzzer_packages/fuzzedpackages/immer/inst/testfiles/probs_hrm_rcpp/inputs/x_ind.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x_ind values: "<< x_ind << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    probs_hrm_rcpp(x,xi,phi,psi,K[0],x_ind);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
