// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bivRho
Rcpp::NumericMatrix bivRho(const NumericMatrix a, const NumericMatrix b, const NumericVector p);
RcppExport SEXP _cort_bivRho(SEXP aSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(bivRho(a, b, p));
    return rcpp_result_gen;
END_RCPP
}
// bivTau
Rcpp::NumericMatrix bivTau(const NumericMatrix a, const NumericMatrix b, const NumericVector p);
RcppExport SEXP _cort_bivTau(SEXP aSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(bivTau(a, b, p));
    return rcpp_result_gen;
END_RCPP
}
// cortMonteCarlo
Rcpp::NumericVector cortMonteCarlo(const NumericMatrix z, const NumericMatrix min, const NumericMatrix max, const int N);
RcppExport SEXP _cort_cortMonteCarlo(SEXP zSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type min(minSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(cortMonteCarlo(z, min, max, N));
    return rcpp_result_gen;
END_RCPP
}
// dCort
Rcpp::NumericVector dCort(const NumericMatrix a, const NumericMatrix b, const NumericVector kern, const NumericMatrix u);
RcppExport SEXP _cort_dCort(SEXP aSEXP, SEXP bSEXP, SEXP kernSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type kern(kernSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(dCort(a, b, kern, u));
    return rcpp_result_gen;
END_RCPP
}
// dcbCopula
Rcpp::NumericVector dcbCopula(const NumericMatrix u, const NumericMatrix x, const NumericVector m);
RcppExport SEXP _cort_dcbCopula(SEXP uSEXP, SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(dcbCopula(u, x, m));
    return rcpp_result_gen;
END_RCPP
}
// lossFunc
double lossFunc(const NumericVector bp, const NumericMatrix bin_repr, const NumericMatrix z);
RcppExport SEXP _cort_lossFunc(SEXP bpSEXP, SEXP bin_reprSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type bin_repr(bin_reprSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(lossFunc(bp, bin_repr, z));
    return rcpp_result_gen;
END_RCPP
}
// pCort
Rcpp::NumericVector pCort(const NumericMatrix a, const NumericMatrix b, const NumericVector p, const NumericMatrix u);
RcppExport SEXP _cort_pCort(SEXP aSEXP, SEXP bSEXP, SEXP pSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(pCort(a, b, p, u));
    return rcpp_result_gen;
END_RCPP
}
// pcbCopula
Rcpp::NumericVector pcbCopula(const NumericMatrix u, const NumericMatrix x, const NumericVector m);
RcppExport SEXP _cort_pcbCopula(SEXP uSEXP, SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(pcbCopula(u, x, m));
    return rcpp_result_gen;
END_RCPP
}
// projectOnTwoDims
Rcpp::List projectOnTwoDims(const NumericMatrix a, const NumericMatrix b, const NumericVector p, const NumericVector f, const NumericVector kern, const NumericVector dims, const NumericMatrix data);
RcppExport SEXP _cort_projectOnTwoDims(SEXP aSEXP, SEXP bSEXP, SEXP pSEXP, SEXP fSEXP, SEXP kernSEXP, SEXP dimsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type kern(kernSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(projectOnTwoDims(a, b, p, f, kern, dims, data));
    return rcpp_result_gen;
END_RCPP
}
// quadProd
double quadProd(const NumericMatrix a, const NumericMatrix b, const NumericVector kern, const NumericMatrix other_a, const NumericMatrix other_b, const NumericVector other_kern);
RcppExport SEXP _cort_quadProd(SEXP aSEXP, SEXP bSEXP, SEXP kernSEXP, SEXP other_aSEXP, SEXP other_bSEXP, SEXP other_kernSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type kern(kernSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type other_a(other_aSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type other_b(other_bSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type other_kern(other_kernSEXP);
    rcpp_result_gen = Rcpp::wrap(quadProd(a, b, kern, other_a, other_b, other_kern));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cort_bivRho", (DL_FUNC) &_cort_bivRho, 3},
    {"_cort_bivTau", (DL_FUNC) &_cort_bivTau, 3},
    {"_cort_cortMonteCarlo", (DL_FUNC) &_cort_cortMonteCarlo, 4},
    {"_cort_dCort", (DL_FUNC) &_cort_dCort, 4},
    {"_cort_dcbCopula", (DL_FUNC) &_cort_dcbCopula, 3},
    {"_cort_lossFunc", (DL_FUNC) &_cort_lossFunc, 3},
    {"_cort_pCort", (DL_FUNC) &_cort_pCort, 4},
    {"_cort_pcbCopula", (DL_FUNC) &_cort_pcbCopula, 3},
    {"_cort_projectOnTwoDims", (DL_FUNC) &_cort_projectOnTwoDims, 7},
    {"_cort_quadProd", (DL_FUNC) &_cort_quadProd, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cort(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
