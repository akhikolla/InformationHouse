// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sample_contingency_table
arma::ivec sample_contingency_table(arma::imat xx, int n, bool forR);
RcppExport SEXP _rhoR_sample_contingency_table(SEXP xxSEXP, SEXP nSEXP, SEXP forRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type forR(forRSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_contingency_table(xx, n, forR));
    return rcpp_result_gen;
END_RCPP
}
// getBootPvalue_c
double getBootPvalue_c(arma::vec distribution, double result);
RcppExport SEXP _rhoR_getBootPvalue_c(SEXP distributionSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< double >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(getBootPvalue_c(distribution, result));
    return rcpp_result_gen;
END_RCPP
}
// check_BRK_combo
bool check_BRK_combo(double BR, double P, double K);
RcppExport SEXP _rhoR_check_BRK_combo(SEXP BRSEXP, SEXP PSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type BR(BRSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(check_BRK_combo(BR, P, K));
    return rcpp_result_gen;
END_RCPP
}
// recall
double recall(double kappa, double BR, double P);
RcppExport SEXP _rhoR_recall(SEXP kappaSEXP, SEXP BRSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type BR(BRSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(recall(kappa, BR, P));
    return rcpp_result_gen;
END_RCPP
}
// find_valid_pk
NumericVector find_valid_pk(arma::colvec kappaDistribution, arma::vec kappaProbability, arma::colvec precisionDistribution, arma::vec precisionProbability, double baserate);
RcppExport SEXP _rhoR_find_valid_pk(SEXP kappaDistributionSEXP, SEXP kappaProbabilitySEXP, SEXP precisionDistributionSEXP, SEXP precisionProbabilitySEXP, SEXP baserateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type kappaDistribution(kappaDistributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappaProbability(kappaProbabilitySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type precisionDistribution(precisionDistributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type precisionProbability(precisionProbabilitySEXP);
    Rcpp::traits::input_parameter< double >::type baserate(baserateSEXP);
    rcpp_result_gen = Rcpp::wrap(find_valid_pk(kappaDistribution, kappaProbability, precisionDistribution, precisionProbability, baserate));
    return rcpp_result_gen;
END_RCPP
}
// generate_kp_list
Rcpp::NumericMatrix generate_kp_list(int numNeeded, double baserate, double kappaMin, double kappaMax, double precisionMin, double precisionMax, int distributionType, long distributionLength);
RcppExport SEXP _rhoR_generate_kp_list(SEXP numNeededSEXP, SEXP baserateSEXP, SEXP kappaMinSEXP, SEXP kappaMaxSEXP, SEXP precisionMinSEXP, SEXP precisionMaxSEXP, SEXP distributionTypeSEXP, SEXP distributionLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numNeeded(numNeededSEXP);
    Rcpp::traits::input_parameter< double >::type baserate(baserateSEXP);
    Rcpp::traits::input_parameter< double >::type kappaMin(kappaMinSEXP);
    Rcpp::traits::input_parameter< double >::type kappaMax(kappaMaxSEXP);
    Rcpp::traits::input_parameter< double >::type precisionMin(precisionMinSEXP);
    Rcpp::traits::input_parameter< double >::type precisionMax(precisionMaxSEXP);
    Rcpp::traits::input_parameter< int >::type distributionType(distributionTypeSEXP);
    Rcpp::traits::input_parameter< long >::type distributionLength(distributionLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_kp_list(numNeeded, baserate, kappaMin, kappaMax, precisionMin, precisionMax, distributionType, distributionLength));
    return rcpp_result_gen;
END_RCPP
}
// contingency_table
arma::imat contingency_table(double precision, double rec, int length, double baserate);
RcppExport SEXP _rhoR_contingency_table(SEXP precisionSEXP, SEXP recSEXP, SEXP lengthSEXP, SEXP baserateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type rec(recSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type baserate(baserateSEXP);
    rcpp_result_gen = Rcpp::wrap(contingency_table(precision, rec, length, baserate));
    return rcpp_result_gen;
END_RCPP
}
// random_contingency_table
arma::imat random_contingency_table(int setLength, double baserate, double kappaMin, double kappaMax, double minPrecision, double maxPrecision);
RcppExport SEXP _rhoR_random_contingency_table(SEXP setLengthSEXP, SEXP baserateSEXP, SEXP kappaMinSEXP, SEXP kappaMaxSEXP, SEXP minPrecisionSEXP, SEXP maxPrecisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type setLength(setLengthSEXP);
    Rcpp::traits::input_parameter< double >::type baserate(baserateSEXP);
    Rcpp::traits::input_parameter< double >::type kappaMin(kappaMinSEXP);
    Rcpp::traits::input_parameter< double >::type kappaMax(kappaMaxSEXP);
    Rcpp::traits::input_parameter< double >::type minPrecision(minPrecisionSEXP);
    Rcpp::traits::input_parameter< double >::type maxPrecision(maxPrecisionSEXP);
    rcpp_result_gen = Rcpp::wrap(random_contingency_table(setLength, baserate, kappaMin, kappaMax, minPrecision, maxPrecision));
    return rcpp_result_gen;
END_RCPP
}
// kappa_ct
double kappa_ct(arma::imat ct);
RcppExport SEXP _rhoR_kappa_ct(SEXP ctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat >::type ct(ctSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa_ct(ct));
    return rcpp_result_gen;
END_RCPP
}
// getHand_ct
arma::imat getHand_ct(arma::imat ct, int handSetLength, double handSetBaserate);
RcppExport SEXP _rhoR_getHand_ct(SEXP ctSEXP, SEXP handSetLengthSEXP, SEXP handSetBaserateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat >::type ct(ctSEXP);
    Rcpp::traits::input_parameter< int >::type handSetLength(handSetLengthSEXP);
    Rcpp::traits::input_parameter< double >::type handSetBaserate(handSetBaserateSEXP);
    rcpp_result_gen = Rcpp::wrap(getHand_ct(ct, handSetLength, handSetBaserate));
    return rcpp_result_gen;
END_RCPP
}
// getHand_kappa
double getHand_kappa(arma::imat ct, int handSetLength, double handSetBaserate);
RcppExport SEXP _rhoR_getHand_kappa(SEXP ctSEXP, SEXP handSetLengthSEXP, SEXP handSetBaserateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat >::type ct(ctSEXP);
    Rcpp::traits::input_parameter< int >::type handSetLength(handSetLengthSEXP);
    Rcpp::traits::input_parameter< double >::type handSetBaserate(handSetBaserateSEXP);
    rcpp_result_gen = Rcpp::wrap(getHand_kappa(ct, handSetLength, handSetBaserate));
    return rcpp_result_gen;
END_RCPP
}
// calcRho_c
double calcRho_c(double x, double OcSBaserate, int testSetLength, double testSetBaserateInflation, int OcSLength, int replicates, double ScSKappaThreshold, double ScSKappaMin, double ScSPrecisionMin, double ScSPrecisionMax, NumericMatrix KPs);
RcppExport SEXP _rhoR_calcRho_c(SEXP xSEXP, SEXP OcSBaserateSEXP, SEXP testSetLengthSEXP, SEXP testSetBaserateInflationSEXP, SEXP OcSLengthSEXP, SEXP replicatesSEXP, SEXP ScSKappaThresholdSEXP, SEXP ScSKappaMinSEXP, SEXP ScSPrecisionMinSEXP, SEXP ScSPrecisionMaxSEXP, SEXP KPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type OcSBaserate(OcSBaserateSEXP);
    Rcpp::traits::input_parameter< int >::type testSetLength(testSetLengthSEXP);
    Rcpp::traits::input_parameter< double >::type testSetBaserateInflation(testSetBaserateInflationSEXP);
    Rcpp::traits::input_parameter< int >::type OcSLength(OcSLengthSEXP);
    Rcpp::traits::input_parameter< int >::type replicates(replicatesSEXP);
    Rcpp::traits::input_parameter< double >::type ScSKappaThreshold(ScSKappaThresholdSEXP);
    Rcpp::traits::input_parameter< double >::type ScSKappaMin(ScSKappaMinSEXP);
    Rcpp::traits::input_parameter< double >::type ScSPrecisionMin(ScSPrecisionMinSEXP);
    Rcpp::traits::input_parameter< double >::type ScSPrecisionMax(ScSPrecisionMaxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type KPs(KPsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRho_c(x, OcSBaserate, testSetLength, testSetBaserateInflation, OcSLength, replicates, ScSKappaThreshold, ScSKappaMin, ScSPrecisionMin, ScSPrecisionMax, KPs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rhoR_sample_contingency_table", (DL_FUNC) &_rhoR_sample_contingency_table, 3},
    {"_rhoR_getBootPvalue_c", (DL_FUNC) &_rhoR_getBootPvalue_c, 2},
    {"_rhoR_check_BRK_combo", (DL_FUNC) &_rhoR_check_BRK_combo, 3},
    {"_rhoR_recall", (DL_FUNC) &_rhoR_recall, 3},
    {"_rhoR_find_valid_pk", (DL_FUNC) &_rhoR_find_valid_pk, 5},
    {"_rhoR_generate_kp_list", (DL_FUNC) &_rhoR_generate_kp_list, 8},
    {"_rhoR_contingency_table", (DL_FUNC) &_rhoR_contingency_table, 4},
    {"_rhoR_random_contingency_table", (DL_FUNC) &_rhoR_random_contingency_table, 6},
    {"_rhoR_kappa_ct", (DL_FUNC) &_rhoR_kappa_ct, 1},
    {"_rhoR_getHand_ct", (DL_FUNC) &_rhoR_getHand_ct, 3},
    {"_rhoR_getHand_kappa", (DL_FUNC) &_rhoR_getHand_kappa, 3},
    {"_rhoR_calcRho_c", (DL_FUNC) &_rhoR_calcRho_c, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_rhoR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
