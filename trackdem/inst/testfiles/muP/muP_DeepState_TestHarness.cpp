// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// muP_DeepState_TestHarness_generation.cpp and muP_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector muP(NumericVector m, NumericVector id, NumericVector cm1, NumericVector cm2, NumericVector cm3, IntegerVector d);

TEST(trackdem_deepstate_test,muP_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector m  = RcppDeepState_NumericVector();
  qs::c_qsave(m,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/m.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  NumericVector id  = RcppDeepState_NumericVector();
  qs::c_qsave(id,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/id.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "id values: "<< id << std::endl;
  NumericVector cm1  = RcppDeepState_NumericVector();
  qs::c_qsave(cm1,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/cm1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cm1 values: "<< cm1 << std::endl;
  NumericVector cm2  = RcppDeepState_NumericVector();
  qs::c_qsave(cm2,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/cm2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cm2 values: "<< cm2 << std::endl;
  NumericVector cm3  = RcppDeepState_NumericVector();
  qs::c_qsave(cm3,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/cm3.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cm3 values: "<< cm3 << std::endl;
  IntegerVector d  = RcppDeepState_IntegerVector();
  qs::c_qsave(d,"/home/akhila/fuzzer_packages/fuzzedpackages/trackdem/inst/testfiles/muP/inputs/d.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    muP(m,id,cm1,cm2,cm3,d);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
