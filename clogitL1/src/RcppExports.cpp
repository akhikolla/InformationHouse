// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// clogitl1_c
NumericMatrix clogitl1_c(NumericVector n, NumericVector m, NumericMatrix Xmat, NumericVector yvec, int switchIter, int numLambda, double minLambda, double alpha);
RcppExport SEXP _clogitL1_clogitl1_c(SEXP nSEXP, SEXP mSEXP, SEXP XmatSEXP, SEXP yvecSEXP, SEXP switchIterSEXP, SEXP numLambdaSEXP, SEXP minLambdaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< int >::type switchIter(switchIterSEXP);
    Rcpp::traits::input_parameter< int >::type numLambda(numLambdaSEXP);
    Rcpp::traits::input_parameter< double >::type minLambda(minLambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(clogitl1_c(n, m, Xmat, yvec, switchIter, numLambda, minLambda, alpha));
    return rcpp_result_gen;
END_RCPP
}
// clogitl1CV_c
NumericMatrix clogitl1CV_c(NumericVector n, NumericVector m, NumericMatrix Xmat, NumericVector yvec, NumericVector lambdas, NumericVector keepvec, double alpha);
RcppExport SEXP _clogitL1_clogitl1CV_c(SEXP nSEXP, SEXP mSEXP, SEXP XmatSEXP, SEXP yvecSEXP, SEXP lambdasSEXP, SEXP keepvecSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type keepvec(keepvecSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(clogitl1CV_c(n, m, Xmat, yvec, lambdas, keepvec, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clogitL1_clogitl1_c", (DL_FUNC) &_clogitL1_clogitl1_c, 8},
    {"_clogitL1_clogitl1CV_c", (DL_FUNC) &_clogitL1_clogitl1CV_c, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_clogitL1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
