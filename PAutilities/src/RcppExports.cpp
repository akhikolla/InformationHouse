// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_indices
List get_indices(NumericVector y_var, int window_size);
RcppExport SEXP _PAutilities_get_indices(SEXP y_varSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_var(y_varSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_indices(y_var, window_size));
    return rcpp_result_gen;
END_RCPP
}
// rolling_groups
List rolling_groups(IntegerVector values, int n);
RcppExport SEXP _PAutilities_rolling_groups(SEXP valuesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_groups(values, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PAutilities_get_indices", (DL_FUNC) &_PAutilities_get_indices, 2},
    {"_PAutilities_rolling_groups", (DL_FUNC) &_PAutilities_rolling_groups, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_PAutilities(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
