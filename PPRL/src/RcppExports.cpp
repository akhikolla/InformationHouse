// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CreateALC
DataFrame CreateALC(CharacterVector ID, DataFrame data, LogicalVector soundex, SEXP password);
RcppExport SEXP _PPRL_CreateALC(SEXP IDSEXP, SEXP dataSEXP, SEXP soundexSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type soundex(soundexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateALC(ID, data, soundex, password));
    return rcpp_result_gen;
END_RCPP
}
// Create581
DataFrame Create581(CharacterVector ID, DataFrame data, List code, SEXP password);
RcppExport SEXP _PPRL_Create581(SEXP IDSEXP, SEXP dataSEXP, SEXP codeSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type code(codeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(Create581(ID, data, code, password));
    return rcpp_result_gen;
END_RCPP
}
// CreateAS16
DataFrame CreateAS16(CharacterVector ID, CharacterVector data, SEXP password);
RcppExport SEXP _PPRL_CreateAS16(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateAS16(ID, data, password));
    return rcpp_result_gen;
END_RCPP
}
// CompareAS16
DataFrame CompareAS16(CharacterVector IDA, CharacterVector dataA, CharacterVector IDB, CharacterVector dataB, SEXP password, float t);
RcppExport SEXP _PPRL_CompareAS16(SEXP IDASEXP, SEXP dataASEXP, SEXP IDBSEXP, SEXP dataBSEXP, SEXP passwordSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IDA(IDASEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataA(dataASEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IDB(IDBSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dataB(dataBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(CompareAS16(IDA, dataA, IDB, dataB, password, t));
    return rcpp_result_gen;
END_RCPP
}
// CreateBalancedBF
DataFrame CreateBalancedBF(CharacterVector ID, CharacterVector data, SEXP password);
RcppExport SEXP _PPRL_CreateBalancedBF(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateBalancedBF(ID, data, password));
    return rcpp_result_gen;
END_RCPP
}
// CreateDoubleBalancedBF
DataFrame CreateDoubleBalancedBF(CharacterVector ID, CharacterVector data, SEXP password);
RcppExport SEXP _PPRL_CreateDoubleBalancedBF(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateDoubleBalancedBF(ID, data, password));
    return rcpp_result_gen;
END_RCPP
}
// CreateCLK
DataFrame CreateCLK(SEXP ID, DataFrame data, SEXP password, int k, IntegerVector padding, IntegerVector qgram, unsigned lenBloom);
RcppExport SEXP _PPRL_CreateCLK(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP, SEXP kSEXP, SEXP paddingSEXP, SEXP qgramSEXP, SEXP lenBloomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qgram(qgramSEXP);
    Rcpp::traits::input_parameter< unsigned >::type lenBloom(lenBloomSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateCLK(ID, data, password, k, padding, qgram, lenBloom));
    return rcpp_result_gen;
END_RCPP
}
// CreateMarkovCLK
DataFrame CreateMarkovCLK(SEXP ID, DataFrame data, SEXP password, NumericMatrix markovTable, int k1, int k2, IntegerVector padding, IntegerVector qgram, unsigned lenBloom, bool includeOriginalBigram, bool v);
RcppExport SEXP _PPRL_CreateMarkovCLK(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP, SEXP markovTableSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP paddingSEXP, SEXP qgramSEXP, SEXP lenBloomSEXP, SEXP includeOriginalBigramSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type markovTable(markovTableSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qgram(qgramSEXP);
    Rcpp::traits::input_parameter< unsigned >::type lenBloom(lenBloomSEXP);
    Rcpp::traits::input_parameter< bool >::type includeOriginalBigram(includeOriginalBigramSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateMarkovCLK(ID, data, password, markovTable, k1, k2, padding, qgram, lenBloom, includeOriginalBigram, v));
    return rcpp_result_gen;
END_RCPP
}
// CreateEnsembleCLK
DataFrame CreateEnsembleCLK(SEXP ID, DataFrame data, SEXP password, int NumberOfCLK, int k, IntegerVector padding, IntegerVector qgram, unsigned lenBloom);
RcppExport SEXP _PPRL_CreateEnsembleCLK(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP, SEXP NumberOfCLKSEXP, SEXP kSEXP, SEXP paddingSEXP, SEXP qgramSEXP, SEXP lenBloomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< int >::type NumberOfCLK(NumberOfCLKSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qgram(qgramSEXP);
    Rcpp::traits::input_parameter< unsigned >::type lenBloom(lenBloomSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateEnsembleCLK(ID, data, password, NumberOfCLK, k, padding, qgram, lenBloom));
    return rcpp_result_gen;
END_RCPP
}
// CreateBF
DataFrame CreateBF(SEXP ID, SEXP data, SEXP password, int k, int padding, int qgram, unsigned lenBloom);
RcppExport SEXP _PPRL_CreateBF(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP, SEXP kSEXP, SEXP paddingSEXP, SEXP qgramSEXP, SEXP lenBloomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< int >::type qgram(qgramSEXP);
    Rcpp::traits::input_parameter< unsigned >::type lenBloom(lenBloomSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateBF(ID, data, password, k, padding, qgram, lenBloom));
    return rcpp_result_gen;
END_RCPP
}
// CreateRecordLevelBF
DataFrame CreateRecordLevelBF(SEXP ID, DataFrame data, SEXP password, int lenRLBF, int k, IntegerVector padding, IntegerVector qgram, IntegerVector lenBloom, std::string method, NumericVector weigths);
RcppExport SEXP _PPRL_CreateRecordLevelBF(SEXP IDSEXP, SEXP dataSEXP, SEXP passwordSEXP, SEXP lenRLBFSEXP, SEXP kSEXP, SEXP paddingSEXP, SEXP qgramSEXP, SEXP lenBloomSEXP, SEXP methodSEXP, SEXP weigthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< int >::type lenRLBF(lenRLBFSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qgram(qgramSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lenBloom(lenBloomSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weigths(weigthsSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateRecordLevelBF(ID, data, password, lenRLBF, k, padding, qgram, lenBloom, method, weigths));
    return rcpp_result_gen;
END_RCPP
}
// CreateBitFlippingBF
DataFrame CreateBitFlippingBF(DataFrame data, SEXP password, float f);
RcppExport SEXP _PPRL_CreateBitFlippingBF(SEXP dataSEXP, SEXP passwordSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< float >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateBitFlippingBF(data, password, f));
    return rcpp_result_gen;
END_RCPP
}
// DeterministicLinkagec
DataFrame DeterministicLinkagec(SEXP IDA_, SEXP dataA_, SEXP blockingdataA_, SEXP IDB_, SEXP dataB_, SEXP blockingdataB_, SEXP method_, SEXP blocking_, SEXP threshold_, SEXP lenNgram_, LogicalVector ind_c0_, LogicalVector ind_c1_, int counterSim);
RcppExport SEXP _PPRL_DeterministicLinkagec(SEXP IDA_SEXP, SEXP dataA_SEXP, SEXP blockingdataA_SEXP, SEXP IDB_SEXP, SEXP dataB_SEXP, SEXP blockingdataB_SEXP, SEXP method_SEXP, SEXP blocking_SEXP, SEXP threshold_SEXP, SEXP lenNgram_SEXP, SEXP ind_c0_SEXP, SEXP ind_c1_SEXP, SEXP counterSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type IDA_(IDA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataA_(dataA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blockingdataA_(blockingdataA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type IDB_(IDB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataB_(dataB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blockingdataB_(blockingdataB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type method_(method_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blocking_(blocking_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type threshold_(threshold_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type lenNgram_(lenNgram_SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ind_c0_(ind_c0_SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ind_c1_(ind_c1_SEXP);
    Rcpp::traits::input_parameter< int >::type counterSim(counterSimSEXP);
    rcpp_result_gen = Rcpp::wrap(DeterministicLinkagec(IDA_, dataA_, blockingdataA_, IDB_, dataB_, blockingdataB_, method_, blocking_, threshold_, lenNgram_, ind_c0_, ind_c1_, counterSim));
    return rcpp_result_gen;
END_RCPP
}
// ElegantPairingVec
DataFrame ElegantPairingVec(CharacterVector ID, DataFrame data);
RcppExport SEXP _PPRL_ElegantPairingVec(SEXP IDSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(ElegantPairingVec(ID, data));
    return rcpp_result_gen;
END_RCPP
}
// ElegantPairingInt
SEXP ElegantPairingInt(int int1, int int2);
RcppExport SEXP _PPRL_ElegantPairingInt(SEXP int1SEXP, SEXP int2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type int1(int1SEXP);
    Rcpp::traits::input_parameter< int >::type int2(int2SEXP);
    rcpp_result_gen = Rcpp::wrap(ElegantPairingInt(int1, int2));
    return rcpp_result_gen;
END_RCPP
}
// ProbabilisticLinkagec
DataFrame ProbabilisticLinkagec(SEXP IDA_, SEXP dataA_, SEXP blockingdataA_, SEXP IDB_, SEXP dataB_, SEXP blockingdataB_, SEXP method_, SEXP blocking_, SEXP threshold_, SEXP lenNgram_, LogicalVector ind_c0_, LogicalVector ind_c1_, NumericVector m_, NumericVector u_, NumericVector p_, NumericVector e, double upper, double lower, double jaroWeightFactor);
RcppExport SEXP _PPRL_ProbabilisticLinkagec(SEXP IDA_SEXP, SEXP dataA_SEXP, SEXP blockingdataA_SEXP, SEXP IDB_SEXP, SEXP dataB_SEXP, SEXP blockingdataB_SEXP, SEXP method_SEXP, SEXP blocking_SEXP, SEXP threshold_SEXP, SEXP lenNgram_SEXP, SEXP ind_c0_SEXP, SEXP ind_c1_SEXP, SEXP m_SEXP, SEXP u_SEXP, SEXP p_SEXP, SEXP eSEXP, SEXP upperSEXP, SEXP lowerSEXP, SEXP jaroWeightFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type IDA_(IDA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataA_(dataA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blockingdataA_(blockingdataA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type IDB_(IDB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataB_(dataB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blockingdataB_(blockingdataB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type method_(method_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type blocking_(blocking_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type threshold_(threshold_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type lenNgram_(lenNgram_SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ind_c0_(ind_c0_SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ind_c1_(ind_c1_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m_(m_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_(u_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type jaroWeightFactor(jaroWeightFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbabilisticLinkagec(IDA_, dataA_, blockingdataA_, IDB_, dataB_, blockingdataB_, method_, blocking_, threshold_, lenNgram_, ind_c0_, ind_c1_, m_, u_, p_, e, upper, lower, jaroWeightFactor));
    return rcpp_result_gen;
END_RCPP
}
// StandardizeString
CharacterVector StandardizeString(CharacterVector strings);
RcppExport SEXP _PPRL_StandardizeString(SEXP stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type strings(stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(StandardizeString(strings));
    return rcpp_result_gen;
END_RCPP
}
// WolframRule30
CharacterVector WolframRule30(CharacterVector ID, CharacterVector data, int lenBloom, int t);
RcppExport SEXP _PPRL_WolframRule30(SEXP IDSEXP, SEXP dataSEXP, SEXP lenBloomSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type lenBloom(lenBloomSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(WolframRule30(ID, data, lenBloom, t));
    return rcpp_result_gen;
END_RCPP
}
// WolframRule90
CharacterVector WolframRule90(CharacterVector ID, CharacterVector data, int lenBloom, int t);
RcppExport SEXP _PPRL_WolframRule90(SEXP IDSEXP, SEXP dataSEXP, SEXP lenBloomSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type lenBloom(lenBloomSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(WolframRule90(ID, data, lenBloom, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PPRL_CreateALC", (DL_FUNC) &_PPRL_CreateALC, 4},
    {"_PPRL_Create581", (DL_FUNC) &_PPRL_Create581, 4},
    {"_PPRL_CreateAS16", (DL_FUNC) &_PPRL_CreateAS16, 3},
    {"_PPRL_CompareAS16", (DL_FUNC) &_PPRL_CompareAS16, 6},
    {"_PPRL_CreateBalancedBF", (DL_FUNC) &_PPRL_CreateBalancedBF, 3},
    {"_PPRL_CreateDoubleBalancedBF", (DL_FUNC) &_PPRL_CreateDoubleBalancedBF, 3},
    {"_PPRL_CreateCLK", (DL_FUNC) &_PPRL_CreateCLK, 7},
    {"_PPRL_CreateMarkovCLK", (DL_FUNC) &_PPRL_CreateMarkovCLK, 11},
    {"_PPRL_CreateEnsembleCLK", (DL_FUNC) &_PPRL_CreateEnsembleCLK, 8},
    {"_PPRL_CreateBF", (DL_FUNC) &_PPRL_CreateBF, 7},
    {"_PPRL_CreateRecordLevelBF", (DL_FUNC) &_PPRL_CreateRecordLevelBF, 10},
    {"_PPRL_CreateBitFlippingBF", (DL_FUNC) &_PPRL_CreateBitFlippingBF, 3},
    {"_PPRL_DeterministicLinkagec", (DL_FUNC) &_PPRL_DeterministicLinkagec, 13},
    {"_PPRL_ElegantPairingVec", (DL_FUNC) &_PPRL_ElegantPairingVec, 2},
    {"_PPRL_ElegantPairingInt", (DL_FUNC) &_PPRL_ElegantPairingInt, 2},
    {"_PPRL_ProbabilisticLinkagec", (DL_FUNC) &_PPRL_ProbabilisticLinkagec, 19},
    {"_PPRL_StandardizeString", (DL_FUNC) &_PPRL_StandardizeString, 1},
    {"_PPRL_WolframRule30", (DL_FUNC) &_PPRL_WolframRule30, 4},
    {"_PPRL_WolframRule90", (DL_FUNC) &_PPRL_WolframRule90, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_PPRL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
