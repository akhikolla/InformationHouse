// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CapplyB
NumericVector CapplyB(NumericVector us, NumericMatrix X, NumericVector mu);
RcppExport SEXP _robFitConGraph_CapplyB(SEXP usSEXP, SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type us(usSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(CapplyB(us, X, mu));
    return rcpp_result_gen;
END_RCPP
}
// myfitConGraphC
List myfitConGraphC(NumericMatrix amat, NumericMatrix S, double n, double tol);
RcppExport SEXP _robFitConGraph_myfitConGraphC(SEXP amatSEXP, SEXP SSEXP, SEXP nSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type amat(amatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(myfitConGraphC(amat, S, n, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_robFitConGraph_CapplyB", (DL_FUNC) &_robFitConGraph_CapplyB, 3},
    {"_robFitConGraph_myfitConGraphC", (DL_FUNC) &_robFitConGraph_myfitConGraphC, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_robFitConGraph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
