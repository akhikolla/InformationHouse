export(lar,
       fs,
       larInf,
       fsInf,
       coef.lar,
       coef.fs,
       predict.lar,
       predict.fs,
       print.lar,
       print.fs,
       print.larInf,
       print.fsInf,
       plot.lar,
       plot.fs,
       fixedLassoInf,
       print.fixedLassoInf,
       forwardStop,
       estimateSigma,
       manyMeans,
       print.manyMeans,
       groupfs,
       groupfsInf,
       scaleGroups,
       factorDesign,
       TG.pvalue, 
       TG.limits, 
       TG.interval,
       debiasingMatrix,
       randomizedLasso,
       randomizedLassoInf,
       ROSI,
       print.ROSI
    )

S3method("coef", "lar")
S3method("predict", "lar")
S3method("print", "lar")
S3method("plot", "lar")
S3method("print", "larInf")
S3method("coef", "fs")
S3method("predict", "fs")
S3method("print", "fs")
S3method("plot", "fs")
S3method("print", "fsInf")
S3method("print", "fixedLassoInf")
S3method("print", "ROSI")
S3method("print", "fixedLogitLassoInf")
S3method("print", "fixedCoxLassoInf")
S3method("print", "manyMeans")
S3method("print", "groupfs")
S3method("print", "groupfsInf")

useDynLib("selectiveInference")
import(glmnet)
import(intervals)
import(survival)
importFrom("graphics", abline, axis, matplot)
importFrom("stats", dnorm, lsfit, pexp, pnorm, predict, 
           qnorm, rnorm, sd, uniroot, dchisq, model.matrix, pchisq, resid, binomial, fitted, 
	   p.adjust, sigma)
importFrom("stats", "coef", "df", "lm", "pf")
importFrom("stats", "glm", "residuals", "vcov")
importFrom("stats", "rbinom", "rexp")
importFrom("Rcpp", "sourceCpp")
importFrom("adaptMCMC", "MCMC")
importFrom("MASS","mvrnorm")
