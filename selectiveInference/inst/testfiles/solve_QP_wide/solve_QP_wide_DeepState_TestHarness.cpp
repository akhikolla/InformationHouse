// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// solve_QP_wide_DeepState_TestHarness_generation.cpp and solve_QP_wide_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List solve_QP_wide(Rcpp::NumericMatrix X, Rcpp::NumericVector bound, double ridge_term, int max_iter, Rcpp::NumericVector theta, Rcpp::NumericVector linear_func, Rcpp::NumericVector gradient, Rcpp::NumericVector X_theta, Rcpp::IntegerVector ever_active, Rcpp::IntegerVector nactive, double kkt_tol, double objective_tol, double parameter_tol, int max_active, int kkt_stop, int objective_stop, int param_stop);

TEST(selectiveInference_deepstate_test,solve_QP_wide_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector bound  = RcppDeepState_NumericVector();
  qs::c_qsave(bound,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/bound.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bound values: "<< bound << std::endl;
  NumericVector ridge_term(1);
  ridge_term[0]  = RcppDeepState_double();
  qs::c_qsave(ridge_term,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/ridge_term.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ridge_term values: "<< ridge_term << std::endl;
  IntegerVector max_iter(1);
  max_iter[0]  = RcppDeepState_int();
  qs::c_qsave(max_iter,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/max_iter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_iter values: "<< max_iter << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector linear_func  = RcppDeepState_NumericVector();
  qs::c_qsave(linear_func,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/linear_func.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "linear_func values: "<< linear_func << std::endl;
  NumericVector gradient  = RcppDeepState_NumericVector();
  qs::c_qsave(gradient,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/gradient.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gradient values: "<< gradient << std::endl;
  NumericVector X_theta  = RcppDeepState_NumericVector();
  qs::c_qsave(X_theta,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/X_theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X_theta values: "<< X_theta << std::endl;
  IntegerVector ever_active  = RcppDeepState_IntegerVector();
  qs::c_qsave(ever_active,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/ever_active.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ever_active values: "<< ever_active << std::endl;
  IntegerVector nactive  = RcppDeepState_IntegerVector();
  qs::c_qsave(nactive,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/nactive.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nactive values: "<< nactive << std::endl;
  NumericVector kkt_tol(1);
  kkt_tol[0]  = RcppDeepState_double();
  qs::c_qsave(kkt_tol,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/kkt_tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkt_tol values: "<< kkt_tol << std::endl;
  NumericVector objective_tol(1);
  objective_tol[0]  = RcppDeepState_double();
  qs::c_qsave(objective_tol,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/objective_tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "objective_tol values: "<< objective_tol << std::endl;
  NumericVector parameter_tol(1);
  parameter_tol[0]  = RcppDeepState_double();
  qs::c_qsave(parameter_tol,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/parameter_tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parameter_tol values: "<< parameter_tol << std::endl;
  IntegerVector max_active(1);
  max_active[0]  = RcppDeepState_int();
  qs::c_qsave(max_active,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/max_active.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_active values: "<< max_active << std::endl;
  IntegerVector kkt_stop(1);
  kkt_stop[0]  = RcppDeepState_int();
  qs::c_qsave(kkt_stop,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/kkt_stop.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkt_stop values: "<< kkt_stop << std::endl;
  IntegerVector objective_stop(1);
  objective_stop[0]  = RcppDeepState_int();
  qs::c_qsave(objective_stop,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/objective_stop.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "objective_stop values: "<< objective_stop << std::endl;
  IntegerVector param_stop(1);
  param_stop[0]  = RcppDeepState_int();
  qs::c_qsave(param_stop,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP_wide/inputs/param_stop.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "param_stop values: "<< param_stop << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    solve_QP_wide(X,bound,ridge_term[0],max_iter[0],theta,linear_func,gradient,X_theta,ever_active,nactive,kkt_tol[0],objective_tol[0],parameter_tol[0],max_active[0],kkt_stop[0],objective_stop[0],param_stop[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
