// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// log_density_laplace__DeepState_TestHarness_generation.cpp and log_density_laplace__DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector log_density_laplace_(double noise_scale, Rcpp::NumericMatrix internal_linear, Rcpp::NumericMatrix internal_state, Rcpp::NumericMatrix optimization_linear, Rcpp::NumericMatrix optimization_state, Rcpp::NumericVector offset);

TEST(selectiveInference_deepstate_test,log_density_laplace__test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector noise_scale(1);
  noise_scale[0]  = RcppDeepState_double();
  qs::c_qsave(noise_scale,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/noise_scale.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "noise_scale values: "<< noise_scale << std::endl;
  NumericMatrix internal_linear  = RcppDeepState_NumericMatrix();
  qs::c_qsave(internal_linear,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/internal_linear.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "internal_linear values: "<< internal_linear << std::endl;
  NumericMatrix internal_state  = RcppDeepState_NumericMatrix();
  qs::c_qsave(internal_state,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/internal_state.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "internal_state values: "<< internal_state << std::endl;
  NumericMatrix optimization_linear  = RcppDeepState_NumericMatrix();
  qs::c_qsave(optimization_linear,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/optimization_linear.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "optimization_linear values: "<< optimization_linear << std::endl;
  NumericMatrix optimization_state  = RcppDeepState_NumericMatrix();
  qs::c_qsave(optimization_state,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/optimization_state.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "optimization_state values: "<< optimization_state << std::endl;
  NumericVector offset  = RcppDeepState_NumericVector();
  qs::c_qsave(offset,"/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_/inputs/offset.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    log_density_laplace_(noise_scale[0],internal_linear,internal_state,optimization_linear,optimization_state,offset);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
