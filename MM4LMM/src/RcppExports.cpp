// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// RemlMM
List RemlMM(VectorXd Y, MatrixXd X, List VarList, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_RemlMM(SEXP YSEXP, SEXP XSEXP, SEXP VarListSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type VarList(VarListSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(RemlMM(Y, X, VarList, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// RemlMM1Mat
List RemlMM1Mat(VectorXd Y, MatrixXd X, MatrixXd VarInv, double logdetVar);
RcppExport SEXP _MM4LMM_RemlMM1Mat(SEXP YSEXP, SEXP XSEXP, SEXP VarInvSEXP, SEXP logdetVarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type VarInv(VarInvSEXP);
    Rcpp::traits::input_parameter< double >::type logdetVar(logdetVarSEXP);
    rcpp_result_gen = Rcpp::wrap(RemlMM1Mat(Y, X, VarInv, logdetVar));
    return rcpp_result_gen;
END_RCPP
}
// sym_inverseRcpp
List sym_inverseRcpp(MatrixXd X);
RcppExport SEXP _MM4LMM_sym_inverseRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sym_inverseRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// RemlMMHen
List RemlMMHen(VectorXd Y, MatrixXd X, MatrixXd Z, List GList, List GinvList, MatrixXd Rinv, VectorXd logdetV, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_RemlMMHen(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP GListSEXP, SEXP GinvListSEXP, SEXP RinvSEXP, SEXP logdetVSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< List >::type GList(GListSEXP);
    Rcpp::traits::input_parameter< List >::type GinvList(GinvListSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Rinv(RinvSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type logdetV(logdetVSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(RemlMMHen(Y, X, Z, GList, GinvList, Rinv, logdetV, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// RemlMMHenDiag
List RemlMMHenDiag(VectorXd Y, MatrixXd X, MatrixXd Z, List GList, List GinvList, VectorXd Rinv, VectorXd logdetV, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_RemlMMHenDiag(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP GListSEXP, SEXP GinvListSEXP, SEXP RinvSEXP, SEXP logdetVSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< List >::type GList(GListSEXP);
    Rcpp::traits::input_parameter< List >::type GinvList(GinvListSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Rinv(RinvSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type logdetV(logdetVSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(RemlMMHenDiag(Y, X, Z, GList, GinvList, Rinv, logdetV, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// MM_Reml2MatRcpp
List MM_Reml2MatRcpp(VectorXd Y, MatrixXd X, MatrixXd U, VectorXd D, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_MM_Reml2MatRcpp(SEXP YSEXP, SEXP XSEXP, SEXP USEXP, SEXP DSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(MM_Reml2MatRcpp(Y, X, U, D, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// PrepMat
List PrepMat(VectorXd Y, MatrixXd K1, MatrixXd K2);
RcppExport SEXP _MM4LMM_PrepMat(SEXP YSEXP, SEXP K1SEXP, SEXP K2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type K2(K2SEXP);
    rcpp_result_gen = Rcpp::wrap(PrepMat(Y, K1, K2));
    return rcpp_result_gen;
END_RCPP
}
// MM_ML2MatRcpp
List MM_ML2MatRcpp(VectorXd Y, MatrixXd X, MatrixXd U, VectorXd D, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_MM_ML2MatRcpp(SEXP YSEXP, SEXP XSEXP, SEXP USEXP, SEXP DSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< VectorXd >::type D(DSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(MM_ML2MatRcpp(Y, X, U, D, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// MLMM
List MLMM(VectorXd Y, MatrixXd X, List VarList, VectorXd Init, int MaxIter, double CritVar, double CritLogLik);
RcppExport SEXP _MM4LMM_MLMM(SEXP YSEXP, SEXP XSEXP, SEXP VarListSEXP, SEXP InitSEXP, SEXP MaxIterSEXP, SEXP CritVarSEXP, SEXP CritLogLikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type VarList(VarListSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type Init(InitSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type CritVar(CritVarSEXP);
    Rcpp::traits::input_parameter< double >::type CritLogLik(CritLogLikSEXP);
    rcpp_result_gen = Rcpp::wrap(MLMM(Y, X, VarList, Init, MaxIter, CritVar, CritLogLik));
    return rcpp_result_gen;
END_RCPP
}
// chol_inverse
List chol_inverse(NumericMatrix X);
RcppExport SEXP _MM4LMM_chol_inverse(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_inverse(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MM4LMM_RemlMM", (DL_FUNC) &_MM4LMM_RemlMM, 7},
    {"_MM4LMM_RemlMM1Mat", (DL_FUNC) &_MM4LMM_RemlMM1Mat, 4},
    {"_MM4LMM_sym_inverseRcpp", (DL_FUNC) &_MM4LMM_sym_inverseRcpp, 1},
    {"_MM4LMM_RemlMMHen", (DL_FUNC) &_MM4LMM_RemlMMHen, 11},
    {"_MM4LMM_RemlMMHenDiag", (DL_FUNC) &_MM4LMM_RemlMMHenDiag, 11},
    {"_MM4LMM_MM_Reml2MatRcpp", (DL_FUNC) &_MM4LMM_MM_Reml2MatRcpp, 8},
    {"_MM4LMM_PrepMat", (DL_FUNC) &_MM4LMM_PrepMat, 3},
    {"_MM4LMM_MM_ML2MatRcpp", (DL_FUNC) &_MM4LMM_MM_ML2MatRcpp, 8},
    {"_MM4LMM_MLMM", (DL_FUNC) &_MM4LMM_MLMM, 7},
    {"_MM4LMM_chol_inverse", (DL_FUNC) &_MM4LMM_chol_inverse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MM4LMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
