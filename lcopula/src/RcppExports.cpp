// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/lcopula.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// marginCombo
NumericMatrix marginCombo(NumericVector alphavec, NumericMatrix mc);
static SEXP _lcopula_marginCombo_try(SEXP alphavecSEXP, SEXP mcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alphavec(alphavecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mc(mcSEXP);
    rcpp_result_gen = Rcpp::wrap(marginCombo(alphavec, mc));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _lcopula_marginCombo(SEXP alphavecSEXP, SEXP mcSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_lcopula_marginCombo_try(alphavecSEXP, mcSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dirspecdens
NumericVector dirspecdens(NumericVector param, NumericMatrix dat, int d, bool transform);
RcppExport SEXP _lcopula_dirspecdens(SEXP paramSEXP, SEXP datSEXP, SEXP dSEXP, SEXP transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type transform(transformSEXP);
    rcpp_result_gen = Rcpp::wrap(dirspecdens(param, dat, d, transform));
    return rcpp_result_gen;
END_RCPP
}
// negdirspecdens
NumericVector negdirspecdens(NumericVector param, NumericMatrix dat, int d, bool transform);
RcppExport SEXP _lcopula_negdirspecdens(SEXP paramSEXP, SEXP datSEXP, SEXP dSEXP, SEXP transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type transform(transformSEXP);
    rcpp_result_gen = Rcpp::wrap(negdirspecdens(param, dat, d, transform));
    return rcpp_result_gen;
END_RCPP
}
// ctspecdens
NumericVector ctspecdens(NumericVector param, NumericMatrix dat, bool transform);
RcppExport SEXP _lcopula_ctspecdens(SEXP paramSEXP, SEXP datSEXP, SEXP transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< bool >::type transform(transformSEXP);
    rcpp_result_gen = Rcpp::wrap(ctspecdens(param, dat, transform));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _lcopula_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericMatrix(*.marginCombo)(NumericVector,NumericMatrix)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _lcopula_RcppExport_registerCCallable() { 
    R_RegisterCCallable("lcopula", "_lcopula_.marginCombo", (DL_FUNC)_lcopula_marginCombo_try);
    R_RegisterCCallable("lcopula", "_lcopula_RcppExport_validate", (DL_FUNC)_lcopula_RcppExport_validate);
    return R_NilValue;
}
