// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mean_help
double mean_help(NumericVector x, int l, int r);
RcppExport SEXP _mosum_mean_help(SEXP xSEXP, SEXP lSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_help(x, l, r));
    return rcpp_result_gen;
END_RCPP
}
// get_k_star
int get_k_star(NumericVector x_star, int k_hat, int G_l, int G_r);
RcppExport SEXP _mosum_get_k_star(SEXP x_starSEXP, SEXP k_hatSEXP, SEXP G_lSEXP, SEXP G_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_star(x_starSEXP);
    Rcpp::traits::input_parameter< int >::type k_hat(k_hatSEXP);
    Rcpp::traits::input_parameter< int >::type G_l(G_lSEXP);
    Rcpp::traits::input_parameter< int >::type G_r(G_rSEXP);
    rcpp_result_gen = Rcpp::wrap(get_k_star(x_star, k_hat, G_l, G_r));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapped_timeSeries
NumericVector bootstrapped_timeSeries(IntegerVector cpts, NumericVector x);
RcppExport SEXP _mosum_bootstrapped_timeSeries(SEXP cptsSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cpts(cptsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapped_timeSeries(cpts, x));
    return rcpp_result_gen;
END_RCPP
}
// cpts_bootstrap_help
List cpts_bootstrap_help(IntegerMatrix cpts_info, NumericVector x, int N_reps);
RcppExport SEXP _mosum_cpts_bootstrap_help(SEXP cpts_infoSEXP, SEXP xSEXP, SEXP N_repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type cpts_info(cpts_infoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N_reps(N_repsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpts_bootstrap_help(cpts_info, x, N_reps));
    return rcpp_result_gen;
END_RCPP
}
// get_comb_ind
unsigned get_comb_ind(const std::vector<bool>& active);
RcppExport SEXP _mosum_get_comb_ind(SEXP activeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type active(activeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_comb_ind(active));
    return rcpp_result_gen;
END_RCPP
}
// extract_sub
NumericMatrix extract_sub(const IntegerVector& cand, const NumericVector& x);
RcppExport SEXP _mosum_extract_sub(SEXP candSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type cand(candSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_sub(cand, x));
    return rcpp_result_gen;
END_RCPP
}
// start_bit_permutations
unsigned start_bit_permutations(unsigned l);
RcppExport SEXP _mosum_start_bit_permutations(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(start_bit_permutations(l));
    return rcpp_result_gen;
END_RCPP
}
// next_bit_permutation
unsigned next_bit_permutation(unsigned v);
RcppExport SEXP _mosum_next_bit_permutation(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(next_bit_permutation(v));
    return rcpp_result_gen;
END_RCPP
}
// is_child
bool is_child(unsigned i_child, unsigned i_parent);
RcppExport SEXP _mosum_is_child(SEXP i_childSEXP, SEXP i_parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type i_child(i_childSEXP);
    Rcpp::traits::input_parameter< unsigned >::type i_parent(i_parentSEXP);
    rcpp_result_gen = Rcpp::wrap(is_child(i_child, i_parent));
    return rcpp_result_gen;
END_RCPP
}
// numberOfSetBits
unsigned numberOfSetBits(uint32_t i);
RcppExport SEXP _mosum_numberOfSetBits(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint32_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(numberOfSetBits(i));
    return rcpp_result_gen;
END_RCPP
}
// comb_contains_cpt
bool comb_contains_cpt(unsigned comb, unsigned k_ind);
RcppExport SEXP _mosum_comb_contains_cpt(SEXP combSEXP, SEXP k_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type comb(combSEXP);
    Rcpp::traits::input_parameter< unsigned >::type k_ind(k_indSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_contains_cpt(comb, k_ind));
    return rcpp_result_gen;
END_RCPP
}
// get_local_costs
double get_local_costs(unsigned icomb, const NumericMatrix& sub_sums);
RcppExport SEXP _mosum_get_local_costs(SEXP icombSEXP, SEXP sub_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type icomb(icombSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sub_sums(sub_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_local_costs(icomb, sub_sums));
    return rcpp_result_gen;
END_RCPP
}
// setBitNumber
int setBitNumber(int n);
RcppExport SEXP _mosum_setBitNumber(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(setBitNumber(n));
    return rcpp_result_gen;
END_RCPP
}
// exhaust_sc
List exhaust_sc(const IntegerVector& cand, const NumericMatrix& sub_sums, double strength, bool log_penalty, unsigned n, unsigned auc, double min_cost);
RcppExport SEXP _mosum_exhaust_sc(SEXP candSEXP, SEXP sub_sumsSEXP, SEXP strengthSEXP, SEXP log_penaltySEXP, SEXP nSEXP, SEXP aucSEXP, SEXP min_costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type cand(candSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sub_sums(sub_sumsSEXP);
    Rcpp::traits::input_parameter< double >::type strength(strengthSEXP);
    Rcpp::traits::input_parameter< bool >::type log_penalty(log_penaltySEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned >::type auc(aucSEXP);
    Rcpp::traits::input_parameter< double >::type min_cost(min_costSEXP);
    rcpp_result_gen = Rcpp::wrap(exhaust_sc(cand, sub_sums, strength, log_penalty, n, auc, min_cost));
    return rcpp_result_gen;
END_RCPP
}
// rolling_sum
NumericVector rolling_sum(const NumericVector& x, unsigned G);
RcppExport SEXP _mosum_rolling_sum(SEXP xSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_sum(x, G));
    return rcpp_result_gen;
END_RCPP
}
// eta_criterion_help
IntegerVector eta_criterion_help(const IntegerVector& candidates, const NumericVector& m_values, double eta, double G_left, double G_right);
RcppExport SEXP _mosum_eta_criterion_help(SEXP candidatesSEXP, SEXP m_valuesSEXP, SEXP etaSEXP, SEXP G_leftSEXP, SEXP G_rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type m_values(m_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type G_left(G_leftSEXP);
    Rcpp::traits::input_parameter< double >::type G_right(G_rightSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_criterion_help(candidates, m_values, eta, G_left, G_right));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mosum_mean_help", (DL_FUNC) &_mosum_mean_help, 3},
    {"_mosum_get_k_star", (DL_FUNC) &_mosum_get_k_star, 4},
    {"_mosum_bootstrapped_timeSeries", (DL_FUNC) &_mosum_bootstrapped_timeSeries, 2},
    {"_mosum_cpts_bootstrap_help", (DL_FUNC) &_mosum_cpts_bootstrap_help, 3},
    {"_mosum_get_comb_ind", (DL_FUNC) &_mosum_get_comb_ind, 1},
    {"_mosum_extract_sub", (DL_FUNC) &_mosum_extract_sub, 2},
    {"_mosum_start_bit_permutations", (DL_FUNC) &_mosum_start_bit_permutations, 1},
    {"_mosum_next_bit_permutation", (DL_FUNC) &_mosum_next_bit_permutation, 1},
    {"_mosum_is_child", (DL_FUNC) &_mosum_is_child, 2},
    {"_mosum_numberOfSetBits", (DL_FUNC) &_mosum_numberOfSetBits, 1},
    {"_mosum_comb_contains_cpt", (DL_FUNC) &_mosum_comb_contains_cpt, 2},
    {"_mosum_get_local_costs", (DL_FUNC) &_mosum_get_local_costs, 2},
    {"_mosum_setBitNumber", (DL_FUNC) &_mosum_setBitNumber, 1},
    {"_mosum_exhaust_sc", (DL_FUNC) &_mosum_exhaust_sc, 7},
    {"_mosum_rolling_sum", (DL_FUNC) &_mosum_rolling_sum, 2},
    {"_mosum_eta_criterion_help", (DL_FUNC) &_mosum_eta_criterion_help, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mosum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
