// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logliknormLR
NumericMatrix logliknormLR(NumericVector yy, NumericMatrix XX_aug, double alpha, int init);
RcppExport SEXP _PWD_logliknormLR(SEXP yySEXP, SEXP XX_augSEXP, SEXP alphaSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type XX_aug(XX_augSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(logliknormLR(yy, XX_aug, alpha, init));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP PWD_logliknormLR(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_PWD_logliknormLR", (DL_FUNC) &_PWD_logliknormLR, 4},
    {"PWD_logliknormLR", (DL_FUNC) &PWD_logliknormLR, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_PWD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
