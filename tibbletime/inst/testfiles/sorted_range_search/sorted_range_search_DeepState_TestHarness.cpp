// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sorted_range_search_DeepState_TestHarness_generation.cpp and sorted_range_search_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

LogicalVector sorted_range_search(NumericVector x, double lower, double upper);

TEST(tibbletime_deepstate_test,sorted_range_search_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/tibbletime/inst/testfiles/sorted_range_search/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector lower(1);
  lower[0]  = RcppDeepState_double();
  qs::c_qsave(lower,"/home/akhila/fuzzer_packages/fuzzedpackages/tibbletime/inst/testfiles/sorted_range_search/inputs/lower.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lower values: "<< lower << std::endl;
  NumericVector upper(1);
  upper[0]  = RcppDeepState_double();
  qs::c_qsave(upper,"/home/akhila/fuzzer_packages/fuzzedpackages/tibbletime/inst/testfiles/sorted_range_search/inputs/upper.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "upper values: "<< upper << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sorted_range_search(x,lower[0],upper[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
