// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// is_ordered_numeric
bool is_ordered_numeric(NumericVector x);
RcppExport SEXP _tibbletime_is_ordered_numeric(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_ordered_numeric(x));
    return rcpp_result_gen;
END_RCPP
}
// sorted_range_search
LogicalVector sorted_range_search(NumericVector x, double lower, double upper);
RcppExport SEXP _tibbletime_sorted_range_search(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(sorted_range_search(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tibbletime_is_ordered_numeric", (DL_FUNC) &_tibbletime_is_ordered_numeric, 1},
    {"_tibbletime_sorted_range_search", (DL_FUNC) &_tibbletime_sorted_range_search, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_tibbletime(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
