<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./cycle_decomp_DeepState_TestHarness --input_test_file /home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_output/3a963b753774c7599d74db028cdc7eda961c1815.crash</line>
</preamble>

<pid>3954671</pid>
<ppid>3954670</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--xml=yes</arg>
    <arg>--xml-file=/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_output/log_3a963b753774c7599d74db028cdc7eda961c1815/valgrind_log</arg>
    <arg>--tool=memcheck</arg>
    <arg>--leak-check=yes</arg>
  </vargv>
  <argv>
    <exe>./cycle_decomp_DeepState_TestHarness</exe>
    <arg>--input_test_file</arg>
    <arg>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_output/3a963b753774c7599d74db028cdc7eda961c1815.crash</arg>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.049 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 1</what>
  <stack>
    <frame>
      <ip>0x424B55</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>cycle_decomp(Rcpp::Vector&lt;14, Rcpp::PreserveStorage&gt;)</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist</dir>
      <file>src/utils.cpp</file>
      <line>208</line>
    </frame>
    <frame>
      <ip>0x4090DA</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_Test_rankdist_deepstate_test_cycle_decomp_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp</dir>
      <file>cycle_decomp_DeepState_TestHarness.cpp</file>
      <line>19</line>
    </frame>
    <frame>
      <ip>0x408EB8</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_Run_rankdist_deepstate_test_cycle_decomp_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp</dir>
      <file>cycle_decomp_DeepState_TestHarness.cpp</file>
      <line>10</line>
    </frame>
    <frame>
      <ip>0x418A08</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_RunTest.isra.0</fn>
    </frame>
    <frame>
      <ip>0x418CA9</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_ForkAndRunTest</fn>
    </frame>
    <frame>
      <ip>0x418D84</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_RunSavedTestCase</fn>
    </frame>
    <frame>
      <ip>0x407745</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>main</fn>
    </frame>
  </stack>
  <auxwhat>Address 0xffffffff8a0a2ab0 is not stack'd, malloc'd or (recently) free'd</auxwhat>
</error>

<fatal_signal>
  <tid>1</tid>
  <signo>11</signo>
  <signame>SIGSEGV</signame>
  <sicode>1</sicode>
  <event>Access not within mapped region</event>
  <siaddr>0xFFFFFFFF8A0A2AB0</siaddr>
  <stack>
    <frame>
      <ip>0x424B55</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>cycle_decomp(Rcpp::Vector&lt;14, Rcpp::PreserveStorage&gt;)</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist</dir>
      <file>src/utils.cpp</file>
      <line>208</line>
    </frame>
    <frame>
      <ip>0x4090DA</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_Test_rankdist_deepstate_test_cycle_decomp_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp</dir>
      <file>cycle_decomp_DeepState_TestHarness.cpp</file>
      <line>19</line>
    </frame>
    <frame>
      <ip>0x408EB8</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_Run_rankdist_deepstate_test_cycle_decomp_test()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp</dir>
      <file>cycle_decomp_DeepState_TestHarness.cpp</file>
      <line>10</line>
    </frame>
    <frame>
      <ip>0x418A08</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_RunTest.isra.0</fn>
    </frame>
    <frame>
      <ip>0x418CA9</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_ForkAndRunTest</fn>
    </frame>
    <frame>
      <ip>0x418D84</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>DeepState_RunSavedTestCase</fn>
    </frame>
    <frame>
      <ip>0x407745</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/rankdist/inst/testfiles/cycle_decomp/cycle_decomp_DeepState_TestHarness</obj>
      <fn>main</fn>
    </frame>
  </stack>
</fatal_signal>


<status>
  <state>FINISHED</state>
  <time>00:00:00:13.332 </time>
</status>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>


<status>
  <state>FINISHED</state>
  <time>00:00:00:14.253 </time>
</status>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

