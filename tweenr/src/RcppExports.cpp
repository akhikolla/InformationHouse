// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// numeric_state_interpolator
NumericVector numeric_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_numeric_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// colour_state_interpolator
NumericMatrix colour_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_colour_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// constant_state_interpolator
CharacterVector constant_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_constant_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(constant_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// list_state_interpolator
List list_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_list_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(list_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// numlist_state_interpolator
List numlist_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_numlist_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(numlist_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// phase_state_interpolator
CharacterVector phase_state_interpolator(List data, DataFrame states);
RcppExport SEXP _tweenr_phase_state_interpolator(SEXP dataSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(phase_state_interpolator(data, states));
    return rcpp_result_gen;
END_RCPP
}
// numeric_element_interpolator
DataFrame numeric_element_interpolator(NumericVector data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_numeric_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// colour_element_interpolator
DataFrame colour_element_interpolator(NumericMatrix data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_colour_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// constant_element_interpolator
DataFrame constant_element_interpolator(CharacterVector data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_constant_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(constant_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// list_element_interpolator
List list_element_interpolator(List data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_list_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// numlist_element_interpolator
List numlist_element_interpolator(List data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_numlist_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numlist_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// phase_element_interpolator
DataFrame phase_element_interpolator(CharacterVector data, CharacterVector group, IntegerVector frame, CharacterVector ease);
RcppExport SEXP _tweenr_phase_element_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP frameSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(phase_element_interpolator(data, group, frame, ease));
    return rcpp_result_gen;
END_RCPP
}
// numeric_along_interpolator
DataFrame numeric_along_interpolator(NumericVector data, CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes, CharacterVector ease);
RcppExport SEXP _tweenr_numeric_along_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_along_interpolator(data, group, time, history, keep_last, nframes, ease));
    return rcpp_result_gen;
END_RCPP
}
// colour_along_interpolator
DataFrame colour_along_interpolator(NumericMatrix data, CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes, CharacterVector ease);
RcppExport SEXP _tweenr_colour_along_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_along_interpolator(data, group, time, history, keep_last, nframes, ease));
    return rcpp_result_gen;
END_RCPP
}
// constant_along_interpolator
DataFrame constant_along_interpolator(CharacterVector data, CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes, CharacterVector ease);
RcppExport SEXP _tweenr_constant_along_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(constant_along_interpolator(data, group, time, history, keep_last, nframes, ease));
    return rcpp_result_gen;
END_RCPP
}
// list_along_interpolator
List list_along_interpolator(List data, CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes, CharacterVector ease);
RcppExport SEXP _tweenr_list_along_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_along_interpolator(data, group, time, history, keep_last, nframes, ease));
    return rcpp_result_gen;
END_RCPP
}
// numlist_along_interpolator
List numlist_along_interpolator(List data, CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes, CharacterVector ease);
RcppExport SEXP _tweenr_numlist_along_interpolator(SEXP dataSEXP, SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numlist_along_interpolator(data, group, time, history, keep_last, nframes, ease));
    return rcpp_result_gen;
END_RCPP
}
// phase_along_interpolator
DataFrame phase_along_interpolator(CharacterVector group, NumericVector time, bool history, bool keep_last, int nframes);
RcppExport SEXP _tweenr_phase_along_interpolator(SEXP groupSEXP, SEXP timeSEXP, SEXP historySEXP, SEXP keep_lastSEXP, SEXP nframesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type history(historySEXP);
    Rcpp::traits::input_parameter< bool >::type keep_last(keep_lastSEXP);
    Rcpp::traits::input_parameter< int >::type nframes(nframesSEXP);
    rcpp_result_gen = Rcpp::wrap(phase_along_interpolator(group, time, history, keep_last, nframes));
    return rcpp_result_gen;
END_RCPP
}
// numeric_at_interpolator
NumericVector numeric_at_interpolator(NumericVector from, NumericVector to, NumericVector at, CharacterVector ease);
RcppExport SEXP _tweenr_numeric_at_interpolator(SEXP fromSEXP, SEXP toSEXP, SEXP atSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_at_interpolator(from, to, at, ease));
    return rcpp_result_gen;
END_RCPP
}
// colour_at_interpolator
NumericMatrix colour_at_interpolator(NumericMatrix from, NumericMatrix to, NumericVector at, CharacterVector ease);
RcppExport SEXP _tweenr_colour_at_interpolator(SEXP fromSEXP, SEXP toSEXP, SEXP atSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type from(fromSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_at_interpolator(from, to, at, ease));
    return rcpp_result_gen;
END_RCPP
}
// constant_at_interpolator
CharacterVector constant_at_interpolator(CharacterVector from, CharacterVector to, NumericVector at, CharacterVector ease);
RcppExport SEXP _tweenr_constant_at_interpolator(SEXP fromSEXP, SEXP toSEXP, SEXP atSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(constant_at_interpolator(from, to, at, ease));
    return rcpp_result_gen;
END_RCPP
}
// list_at_interpolator
List list_at_interpolator(List from, List to, NumericVector at, CharacterVector ease);
RcppExport SEXP _tweenr_list_at_interpolator(SEXP fromSEXP, SEXP toSEXP, SEXP atSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type from(fromSEXP);
    Rcpp::traits::input_parameter< List >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_at_interpolator(from, to, at, ease));
    return rcpp_result_gen;
END_RCPP
}
// numlist_at_interpolator
List numlist_at_interpolator(List from, List to, NumericVector at, CharacterVector ease);
RcppExport SEXP _tweenr_numlist_at_interpolator(SEXP fromSEXP, SEXP toSEXP, SEXP atSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type from(fromSEXP);
    Rcpp::traits::input_parameter< List >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numlist_at_interpolator(from, to, at, ease));
    return rcpp_result_gen;
END_RCPP
}
// numeric_fill_interpolator
NumericVector numeric_fill_interpolator(NumericVector data, CharacterVector ease);
RcppExport SEXP _tweenr_numeric_fill_interpolator(SEXP dataSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_fill_interpolator(data, ease));
    return rcpp_result_gen;
END_RCPP
}
// colour_fill_interpolator
NumericMatrix colour_fill_interpolator(NumericMatrix data, CharacterVector ease);
RcppExport SEXP _tweenr_colour_fill_interpolator(SEXP dataSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(colour_fill_interpolator(data, ease));
    return rcpp_result_gen;
END_RCPP
}
// constant_fill_interpolator
CharacterVector constant_fill_interpolator(CharacterVector data, CharacterVector ease);
RcppExport SEXP _tweenr_constant_fill_interpolator(SEXP dataSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(constant_fill_interpolator(data, ease));
    return rcpp_result_gen;
END_RCPP
}
// list_fill_interpolator
List list_fill_interpolator(List data, CharacterVector ease);
RcppExport SEXP _tweenr_list_fill_interpolator(SEXP dataSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_fill_interpolator(data, ease));
    return rcpp_result_gen;
END_RCPP
}
// numlist_fill_interpolator
List numlist_fill_interpolator(List data, CharacterVector ease);
RcppExport SEXP _tweenr_numlist_fill_interpolator(SEXP dataSEXP, SEXP easeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ease(easeSEXP);
    rcpp_result_gen = Rcpp::wrap(numlist_fill_interpolator(data, ease));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tweenr_numeric_state_interpolator", (DL_FUNC) &_tweenr_numeric_state_interpolator, 2},
    {"_tweenr_colour_state_interpolator", (DL_FUNC) &_tweenr_colour_state_interpolator, 2},
    {"_tweenr_constant_state_interpolator", (DL_FUNC) &_tweenr_constant_state_interpolator, 2},
    {"_tweenr_list_state_interpolator", (DL_FUNC) &_tweenr_list_state_interpolator, 2},
    {"_tweenr_numlist_state_interpolator", (DL_FUNC) &_tweenr_numlist_state_interpolator, 2},
    {"_tweenr_phase_state_interpolator", (DL_FUNC) &_tweenr_phase_state_interpolator, 2},
    {"_tweenr_numeric_element_interpolator", (DL_FUNC) &_tweenr_numeric_element_interpolator, 4},
    {"_tweenr_colour_element_interpolator", (DL_FUNC) &_tweenr_colour_element_interpolator, 4},
    {"_tweenr_constant_element_interpolator", (DL_FUNC) &_tweenr_constant_element_interpolator, 4},
    {"_tweenr_list_element_interpolator", (DL_FUNC) &_tweenr_list_element_interpolator, 4},
    {"_tweenr_numlist_element_interpolator", (DL_FUNC) &_tweenr_numlist_element_interpolator, 4},
    {"_tweenr_phase_element_interpolator", (DL_FUNC) &_tweenr_phase_element_interpolator, 4},
    {"_tweenr_numeric_along_interpolator", (DL_FUNC) &_tweenr_numeric_along_interpolator, 7},
    {"_tweenr_colour_along_interpolator", (DL_FUNC) &_tweenr_colour_along_interpolator, 7},
    {"_tweenr_constant_along_interpolator", (DL_FUNC) &_tweenr_constant_along_interpolator, 7},
    {"_tweenr_list_along_interpolator", (DL_FUNC) &_tweenr_list_along_interpolator, 7},
    {"_tweenr_numlist_along_interpolator", (DL_FUNC) &_tweenr_numlist_along_interpolator, 7},
    {"_tweenr_phase_along_interpolator", (DL_FUNC) &_tweenr_phase_along_interpolator, 5},
    {"_tweenr_numeric_at_interpolator", (DL_FUNC) &_tweenr_numeric_at_interpolator, 4},
    {"_tweenr_colour_at_interpolator", (DL_FUNC) &_tweenr_colour_at_interpolator, 4},
    {"_tweenr_constant_at_interpolator", (DL_FUNC) &_tweenr_constant_at_interpolator, 4},
    {"_tweenr_list_at_interpolator", (DL_FUNC) &_tweenr_list_at_interpolator, 4},
    {"_tweenr_numlist_at_interpolator", (DL_FUNC) &_tweenr_numlist_at_interpolator, 4},
    {"_tweenr_numeric_fill_interpolator", (DL_FUNC) &_tweenr_numeric_fill_interpolator, 2},
    {"_tweenr_colour_fill_interpolator", (DL_FUNC) &_tweenr_colour_fill_interpolator, 2},
    {"_tweenr_constant_fill_interpolator", (DL_FUNC) &_tweenr_constant_fill_interpolator, 2},
    {"_tweenr_list_fill_interpolator", (DL_FUNC) &_tweenr_list_fill_interpolator, 2},
    {"_tweenr_numlist_fill_interpolator", (DL_FUNC) &_tweenr_numlist_fill_interpolator, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tweenr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
