// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// latentX_calc_cpp_DeepState_TestHarness_generation.cpp and latentX_calc_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector latentX_calc_cpp(NumericVector parAlpha, NumericVector epsilonT, int ndays);

TEST(foreSIGHT_deepstate_test,latentX_calc_cpp_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector parAlpha  = RcppDeepState_NumericVector();
  qs::c_qsave(parAlpha,"/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/inputs/parAlpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parAlpha values: "<< parAlpha << std::endl;
  NumericVector epsilonT  = RcppDeepState_NumericVector();
  qs::c_qsave(epsilonT,"/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/inputs/epsilonT.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilonT values: "<< epsilonT << std::endl;
  IntegerVector ndays(1);
  ndays[0]  = RcppDeepState_int();
  qs::c_qsave(ndays,"/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/inputs/ndays.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndays values: "<< ndays << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    latentX_calc_cpp(parAlpha,epsilonT,ndays[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
