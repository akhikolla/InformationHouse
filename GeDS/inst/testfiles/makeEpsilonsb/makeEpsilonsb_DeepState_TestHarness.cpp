// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// makeEpsilonsb_DeepState_TestHarness_generation.cpp and makeEpsilonsb_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector makeEpsilonsb(NumericVector data, NumericVector Xs, NumericVector Ys, int degree);

TEST(GeDS_deepstate_test,makeEpsilonsb_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector data  = RcppDeepState_NumericVector();
  qs::c_qsave(data,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/inputs/data.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericVector Xs  = RcppDeepState_NumericVector();
  qs::c_qsave(Xs,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/inputs/Xs.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xs values: "<< Xs << std::endl;
  NumericVector Ys  = RcppDeepState_NumericVector();
  qs::c_qsave(Ys,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/inputs/Ys.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ys values: "<< Ys << std::endl;
  IntegerVector degree(1);
  degree[0]  = RcppDeepState_int();
  qs::c_qsave(degree,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/inputs/degree.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    makeEpsilonsb(data,Xs,Ys,degree[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
