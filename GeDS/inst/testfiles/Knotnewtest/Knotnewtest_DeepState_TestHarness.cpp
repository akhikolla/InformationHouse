// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Knotnewtest_DeepState_TestHarness_generation.cpp and Knotnewtest_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector Knotnewtest(NumericVector wht, NumericVector restmp, NumericVector x, NumericVector dcm, NumericVector oldknots, double tol);

TEST(GeDS_deepstate_test,Knotnewtest_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector wht  = RcppDeepState_NumericVector();
  qs::c_qsave(wht,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/wht.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wht values: "<< wht << std::endl;
  NumericVector restmp  = RcppDeepState_NumericVector();
  qs::c_qsave(restmp,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/restmp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "restmp values: "<< restmp << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector dcm  = RcppDeepState_NumericVector();
  qs::c_qsave(dcm,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/dcm.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dcm values: "<< dcm << std::endl;
  NumericVector oldknots  = RcppDeepState_NumericVector();
  qs::c_qsave(oldknots,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/oldknots.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "oldknots values: "<< oldknots << std::endl;
  NumericVector tol(1);
  tol[0]  = RcppDeepState_double();
  qs::c_qsave(tol,"/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/Knotnewtest/inputs/tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tol values: "<< tol << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Knotnewtest(wht,restmp,x,dcm,oldknots,tol[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
