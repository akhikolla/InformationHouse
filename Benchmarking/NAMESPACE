# $Id: NAMESPACE 231 2020-07-26 20:56:26Z lao $
export(dea, sdea,   # efficiency, eff,
excess, eladder, eladder.plot,
dea.dual,
dea.direct, dea.boot, boot.fear, 
#  dea.mat, dea.dual.mat,
dea.add,
slack,
lambda,
peers, get.number.peers, get.which.peers,
get.peers.lambda,
# print.peers, 
lambda.print, 
dea.plot, dea.plot.frontier, dea.plot.isoquant, dea.plot.transform,
cost.opt, print.cost.opt, summary.cost.opt,
revenue.opt, print.revenue.opt, summary.revenue.opt,
profit.opt, print.profit.opt, summary.profit.opt,
dea.merge, make.merge,
sfa,  sfa.cost, # print.sfa, summary.sfa, residuals.sfa, logLik.sfa, coef.sfa, 
te.sfa, 
# te1.sfa, te2.sfa, 
te.add.sfa, sigma2u.sfa, sigma2v.sfa, sigma2.sfa,
teJ.sfa, teBC.sfa, teMode.sfa,
lambda.sfa,
critValue, typeIerror,
outlier.ap, outlier.ap.plot, outlierC.ap,
eff.dens, eff.dens.plot,
mea, mea.lines, 
malmq, malmquist,
stoned
)


S3method("print", "Farrell")
S3method("summary", "Farrell")

S3method("print", "slack")
S3method("summary", "slack")

S3method("print", "cost.opt")
S3method("summary", "cost.opt")
S3method("print", "profit.opt")
S3method("summary", "profit.opt")
S3method("print", "revenue.opt")
S3method("summary", "revenue.opt")


S3method("print", "sfa")
S3method("summary", "sfa")
S3method("residuals", "sfa")
S3method("logLik", "sfa")
S3method("coef", "sfa")

export( "eff" )
export( "efficiencies" )
S3method( "efficiencies", "default" )
S3method( "eff", "Farrell" )
S3method( "eff", "sfa" )
S3method( "eff.add", "sfa" )
S3method( "efficiencies", "Farrell" )
S3method( "efficiencies", "sfa" )

S3method( "coef", "sfa" )
S3method( "logLik", "sfa" )
S3method( "print", "sfa" )
S3method( "residuals", "sfa" )
S3method( "fitted", "sfa" )
S3method( "summary", "sfa" )
S3method( "vcov", "sfa" )


# importFrom(FEAR,boot.sw98)
import(lpSolveAPI)
importFrom(ucminf, ucminf)
importFrom(quadprog, solve.QP)
importFrom(stats, IQR, coef, complete.cases, density, dnorm, lm, na.omit, pnorm, pt, quantile, residuals, rnorm, sd, uniroot, var) 
importFrom(graphics, abline, arrows, axis, box, grid, hist, lines, mtext, par, plot, points, segments, text)
importFrom(grDevices, chull)
importFrom(methods, is)
importFrom("utils", "flush.console")
useDynLib(Benchmarking, .registration=TRUE)
importFrom(Rcpp, evalCpp)
