// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// chol_LO
NumericMatrix chol_LO(const NumericMatrix A);
RcppExport SEXP _Benchmarking_chol_LO(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(chol_LO(A));
    return rcpp_result_gen;
END_RCPP
}
// chol_downdate
NumericMatrix chol_downdate(const NumericMatrix L, const NumericVector v);
RcppExport SEXP _Benchmarking_chol_downdate(SEXP LSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_downdate(L, v));
    return rcpp_result_gen;
END_RCPP
}
// chol_downdate2
NumericMatrix chol_downdate2(const NumericMatrix L, const NumericVector v);
RcppExport SEXP _Benchmarking_chol_downdate2(SEXP LSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_downdate2(L, v));
    return rcpp_result_gen;
END_RCPP
}
// det_chol_downdate
double det_chol_downdate(const NumericMatrix L, const NumericVector v);
RcppExport SEXP _Benchmarking_det_chol_downdate(SEXP LSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(det_chol_downdate(L, v));
    return rcpp_result_gen;
END_RCPP
}
// chol_update
NumericMatrix chol_update(NumericMatrix L, NumericVector v);
RcppExport SEXP _Benchmarking_chol_update(SEXP LSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_update(L, v));
    return rcpp_result_gen;
END_RCPP
}
// inverse_LO
NumericMatrix inverse_LO(const NumericMatrix L);
RcppExport SEXP _Benchmarking_inverse_LO(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_LO(L));
    return rcpp_result_gen;
END_RCPP
}
// matProdT_LO
NumericMatrix matProdT_LO(const NumericMatrix X);
RcppExport SEXP _Benchmarking_matProdT_LO(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(matProdT_LO(X));
    return rcpp_result_gen;
END_RCPP
}
// inverse_spd
NumericMatrix inverse_spd(const NumericMatrix A, bool lower_triangel);
RcppExport SEXP _Benchmarking_inverse_spd(SEXP ASEXP, SEXP lower_triangelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type lower_triangel(lower_triangelSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_spd(A, lower_triangel));
    return rcpp_result_gen;
END_RCPP
}
// solve_LO
NumericVector solve_LO(const NumericMatrix L, const NumericVector d);
RcppExport SEXP _Benchmarking_solve_LO(SEXP LSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_LO(L, d));
    return rcpp_result_gen;
END_RCPP
}
// det_downdate
double det_downdate(const NumericMatrix A, const NumericVector v, const double det);
RcppExport SEXP _Benchmarking_det_downdate(SEXP ASEXP, SEXP vSEXP, SEXP detSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type det(detSEXP);
    rcpp_result_gen = Rcpp::wrap(det_downdate(A, v, det));
    return rcpp_result_gen;
END_RCPP
}
// outlierCpp
void outlierCpp(const int K, const int R, NumericMatrix xy, NumericMatrix ratio, NumericMatrix imat, NumericVector rmin);
RcppExport SEXP _Benchmarking_outlierCpp(SEXP KSEXP, SEXP RSEXP, SEXP xySEXP, SEXP ratioSEXP, SEXP imatSEXP, SEXP rminSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ratio(ratioSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type imat(imatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rmin(rminSEXP);
    outlierCpp(K, R, xy, ratio, imat, rmin);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Benchmarking_chol_LO", (DL_FUNC) &_Benchmarking_chol_LO, 1},
    {"_Benchmarking_chol_downdate", (DL_FUNC) &_Benchmarking_chol_downdate, 2},
    {"_Benchmarking_chol_downdate2", (DL_FUNC) &_Benchmarking_chol_downdate2, 2},
    {"_Benchmarking_det_chol_downdate", (DL_FUNC) &_Benchmarking_det_chol_downdate, 2},
    {"_Benchmarking_chol_update", (DL_FUNC) &_Benchmarking_chol_update, 2},
    {"_Benchmarking_inverse_LO", (DL_FUNC) &_Benchmarking_inverse_LO, 1},
    {"_Benchmarking_matProdT_LO", (DL_FUNC) &_Benchmarking_matProdT_LO, 1},
    {"_Benchmarking_inverse_spd", (DL_FUNC) &_Benchmarking_inverse_spd, 2},
    {"_Benchmarking_solve_LO", (DL_FUNC) &_Benchmarking_solve_LO, 2},
    {"_Benchmarking_det_downdate", (DL_FUNC) &_Benchmarking_det_downdate, 3},
    {"_Benchmarking_outlierCpp", (DL_FUNC) &_Benchmarking_outlierCpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_Benchmarking(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
