// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// na_matrix
NumericMatrix na_matrix(int n);
RcppExport SEXP _dpseg_na_matrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(na_matrix(n));
    return rcpp_result_gen;
END_RCPP
}
// backtrace_c
NumericVector backtrace_c(NumericVector imax, int jumps);
RcppExport SEXP _dpseg_backtrace_c(SEXP imaxSEXP, SEXP jumpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< int >::type jumps(jumpsSEXP);
    rcpp_result_gen = Rcpp::wrap(backtrace_c(imax, jumps));
    return rcpp_result_gen;
END_RCPP
}
// recursion_linreg_c
List recursion_linreg_c(NumericVector x, NumericVector y, int maxl, bool jumps, double P, int minl, double S0, String type, bool storem, bool storev, String scoref);
RcppExport SEXP _dpseg_recursion_linreg_c(SEXP xSEXP, SEXP ySEXP, SEXP maxlSEXP, SEXP jumpsSEXP, SEXP PSEXP, SEXP minlSEXP, SEXP S0SEXP, SEXP typeSEXP, SEXP storemSEXP, SEXP storevSEXP, SEXP scorefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxl(maxlSEXP);
    Rcpp::traits::input_parameter< bool >::type jumps(jumpsSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type minl(minlSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type storem(storemSEXP);
    Rcpp::traits::input_parameter< bool >::type storev(storevSEXP);
    Rcpp::traits::input_parameter< String >::type scoref(scorefSEXP);
    rcpp_result_gen = Rcpp::wrap(recursion_linreg_c(x, y, maxl, jumps, P, minl, S0, type, storem, storev, scoref));
    return rcpp_result_gen;
END_RCPP
}
// recursion_matrix
List recursion_matrix(NumericVector x, NumericMatrix y, int maxl, bool jumps, double P, int minl, double S0, String type, bool storem, bool storev, String scoref);
RcppExport SEXP _dpseg_recursion_matrix(SEXP xSEXP, SEXP ySEXP, SEXP maxlSEXP, SEXP jumpsSEXP, SEXP PSEXP, SEXP minlSEXP, SEXP S0SEXP, SEXP typeSEXP, SEXP storemSEXP, SEXP storevSEXP, SEXP scorefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxl(maxlSEXP);
    Rcpp::traits::input_parameter< bool >::type jumps(jumpsSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type minl(minlSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type storem(storemSEXP);
    Rcpp::traits::input_parameter< bool >::type storev(storevSEXP);
    Rcpp::traits::input_parameter< String >::type scoref(scorefSEXP);
    rcpp_result_gen = Rcpp::wrap(recursion_matrix(x, y, maxl, jumps, P, minl, S0, type, storem, storev, scoref));
    return rcpp_result_gen;
END_RCPP
}
// scoref_c
List scoref_c(NumericVector x, NumericVector y, int minl, int maxl, double P, double S0, const String type, bool jumps, bool storem, bool storev);
RcppExport SEXP _dpseg_scoref_c(SEXP xSEXP, SEXP ySEXP, SEXP minlSEXP, SEXP maxlSEXP, SEXP PSEXP, SEXP S0SEXP, SEXP typeSEXP, SEXP jumpsSEXP, SEXP storemSEXP, SEXP storevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type minl(minlSEXP);
    Rcpp::traits::input_parameter< int >::type maxl(maxlSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type jumps(jumpsSEXP);
    Rcpp::traits::input_parameter< bool >::type storem(storemSEXP);
    Rcpp::traits::input_parameter< bool >::type storev(storevSEXP);
    rcpp_result_gen = Rcpp::wrap(scoref_c(x, y, minl, maxl, P, S0, type, jumps, storem, storev));
    return rcpp_result_gen;
END_RCPP
}
// scoref_oldc
List scoref_oldc(NumericVector x, NumericVector y, int minl, int maxl, double P, double S0, const String type, bool jumps, bool storem, bool storev);
RcppExport SEXP _dpseg_scoref_oldc(SEXP xSEXP, SEXP ySEXP, SEXP minlSEXP, SEXP maxlSEXP, SEXP PSEXP, SEXP S0SEXP, SEXP typeSEXP, SEXP jumpsSEXP, SEXP storemSEXP, SEXP storevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type minl(minlSEXP);
    Rcpp::traits::input_parameter< int >::type maxl(maxlSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type jumps(jumpsSEXP);
    Rcpp::traits::input_parameter< bool >::type storem(storemSEXP);
    Rcpp::traits::input_parameter< bool >::type storev(storevSEXP);
    rcpp_result_gen = Rcpp::wrap(scoref_oldc(x, y, minl, maxl, P, S0, type, jumps, storem, storev));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dpseg_na_matrix", (DL_FUNC) &_dpseg_na_matrix, 1},
    {"_dpseg_backtrace_c", (DL_FUNC) &_dpseg_backtrace_c, 2},
    {"_dpseg_recursion_linreg_c", (DL_FUNC) &_dpseg_recursion_linreg_c, 11},
    {"_dpseg_recursion_matrix", (DL_FUNC) &_dpseg_recursion_matrix, 11},
    {"_dpseg_scoref_c", (DL_FUNC) &_dpseg_scoref_c, 10},
    {"_dpseg_scoref_oldc", (DL_FUNC) &_dpseg_scoref_oldc, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_dpseg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
