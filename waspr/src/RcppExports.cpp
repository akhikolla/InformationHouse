// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// swap_rcpp
arma::cube swap_rcpp(arma::cube samples, double acc, int iter, bool out);
RcppExport SEXP _waspr_swap_rcpp(SEXP samplesSEXP, SEXP accSEXP, SEXP iterSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type acc(accSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(swap_rcpp(samples, acc, iter, out));
    return rcpp_result_gen;
END_RCPP
}
// hmode
double hmode(NumericVector x, double cip);
RcppExport SEXP _waspr_hmode(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmode(x, cip));
    return rcpp_result_gen;
END_RCPP
}
// hmodeci
NumericVector hmodeci(NumericVector x, double cip);
RcppExport SEXP _waspr_hmodeci(SEXP xSEXP, SEXP cipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cip(cipSEXP);
    rcpp_result_gen = Rcpp::wrap(hmodeci(x, cip));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_waspr_swap_rcpp", (DL_FUNC) &_waspr_swap_rcpp, 4},
    {"_waspr_hmode", (DL_FUNC) &_waspr_hmode, 2},
    {"_waspr_hmodeci", (DL_FUNC) &_waspr_hmodeci, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_waspr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
