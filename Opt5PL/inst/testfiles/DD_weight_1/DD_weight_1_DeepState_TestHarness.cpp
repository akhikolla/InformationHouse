// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// DD_weight_1_DeepState_TestHarness_generation.cpp and DD_weight_1_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector DD_weight_1(NumericVector W, NumericVector T, NumericVector X, NumericMatrix inv, NumericMatrix inv1, int order);

TEST(Opt5PL_deepstate_test,DD_weight_1_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector W  = RcppDeepState_NumericVector();
  qs::c_qsave(W,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/W.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "W values: "<< W << std::endl;
  NumericVector T  = RcppDeepState_NumericVector();
  qs::c_qsave(T,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/T.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T values: "<< T << std::endl;
  NumericVector X  = RcppDeepState_NumericVector();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix inv  = RcppDeepState_NumericMatrix();
  qs::c_qsave(inv,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/inv.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv values: "<< inv << std::endl;
  NumericMatrix inv1  = RcppDeepState_NumericMatrix();
  qs::c_qsave(inv1,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/inv1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv1 values: "<< inv1 << std::endl;
  IntegerVector order(1);
  order[0]  = RcppDeepState_int();
  qs::c_qsave(order,"/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/DD_weight_1/inputs/order.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "order values: "<< order << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    DD_weight_1(W,T,X,inv,inv1,order[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
