// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_distance_haversine_DeepState_TestHarness_generation.cpp and rcpp_distance_haversine_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector rcpp_distance_haversine(Rcpp::NumericVector latFrom, Rcpp::NumericVector lonFrom, Rcpp::NumericVector latTo, Rcpp::NumericVector lonTo, double tolerance);

TEST(gtfs2gps_deepstate_test,rcpp_distance_haversine_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector latFrom  = RcppDeepState_NumericVector();
  qs::c_qsave(latFrom,"/home/akhila/fuzzer_packages/fuzzedpackages/gtfs2gps/inst/testfiles/rcpp_distance_haversine/inputs/latFrom.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latFrom values: "<< latFrom << std::endl;
  NumericVector lonFrom  = RcppDeepState_NumericVector();
  qs::c_qsave(lonFrom,"/home/akhila/fuzzer_packages/fuzzedpackages/gtfs2gps/inst/testfiles/rcpp_distance_haversine/inputs/lonFrom.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lonFrom values: "<< lonFrom << std::endl;
  NumericVector latTo  = RcppDeepState_NumericVector();
  qs::c_qsave(latTo,"/home/akhila/fuzzer_packages/fuzzedpackages/gtfs2gps/inst/testfiles/rcpp_distance_haversine/inputs/latTo.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latTo values: "<< latTo << std::endl;
  NumericVector lonTo  = RcppDeepState_NumericVector();
  qs::c_qsave(lonTo,"/home/akhila/fuzzer_packages/fuzzedpackages/gtfs2gps/inst/testfiles/rcpp_distance_haversine/inputs/lonTo.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lonTo values: "<< lonTo << std::endl;
  NumericVector tolerance(1);
  tolerance[0]  = RcppDeepState_double();
  qs::c_qsave(tolerance,"/home/akhila/fuzzer_packages/fuzzedpackages/gtfs2gps/inst/testfiles/rcpp_distance_haversine/inputs/tolerance.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tolerance values: "<< tolerance << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_distance_haversine(latFrom,lonFrom,latTo,lonTo,tolerance[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
