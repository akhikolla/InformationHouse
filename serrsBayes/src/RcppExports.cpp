// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// weightedLorentzian
Eigen::VectorXd weightedLorentzian(Eigen::VectorXd location, Eigen::VectorXd scale, Eigen::VectorXd amplitude, Eigen::VectorXd wavelengths);
RcppExport SEXP _serrsBayes_weightedLorentzian(SEXP locationSEXP, SEXP scaleSEXP, SEXP amplitudeSEXP, SEXP wavelengthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type location(locationSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wavelengths(wavelengthsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedLorentzian(location, scale, amplitude, wavelengths));
    return rcpp_result_gen;
END_RCPP
}
// effectiveSampleSize
double effectiveSampleSize(NumericVector log_weights);
RcppExport SEXP _serrsBayes_effectiveSampleSize(SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(effectiveSampleSize(log_weights));
    return rcpp_result_gen;
END_RCPP
}
// reWeightParticles
List reWeightParticles(NumericMatrix spectra, NumericMatrix peaks, NumericMatrix baselines, int i, int start, NumericVector sigma, NumericVector old_weights, double alpha, IntegerVector idx);
RcppExport SEXP _serrsBayes_reWeightParticles(SEXP spectraSEXP, SEXP peaksSEXP, SEXP baselinesSEXP, SEXP iSEXP, SEXP startSEXP, SEXP sigmaSEXP, SEXP old_weightsSEXP, SEXP alphaSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type peaks(peaksSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type old_weights(old_weightsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reWeightParticles(spectra, peaks, baselines, i, start, sigma, old_weights, alpha, idx));
    return rcpp_result_gen;
END_RCPP
}
// residualResampling
Eigen::ArrayXi residualResampling(NumericVector log_wt);
RcppExport SEXP _serrsBayes_residualResampling(SEXP log_wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type log_wt(log_wtSEXP);
    rcpp_result_gen = Rcpp::wrap(residualResampling(log_wt));
    return rcpp_result_gen;
END_RCPP
}
// resampleParticles
Eigen::ArrayXi resampleParticles(NumericVector log_weights, NumericMatrix ampMx, NumericMatrix scaleMx, NumericMatrix peaks, NumericVector baselines, int n_y, int nwl);
RcppExport SEXP _serrsBayes_resampleParticles(SEXP log_weightsSEXP, SEXP ampMxSEXP, SEXP scaleMxSEXP, SEXP peaksSEXP, SEXP baselinesSEXP, SEXP n_ySEXP, SEXP nwlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type log_weights(log_weightsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ampMx(ampMxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scaleMx(scaleMxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type peaks(peaksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< int >::type n_y(n_ySEXP);
    Rcpp::traits::input_parameter< int >::type nwl(nwlSEXP);
    rcpp_result_gen = Rcpp::wrap(resampleParticles(log_weights, ampMx, scaleMx, peaks, baselines, n_y, nwl));
    return rcpp_result_gen;
END_RCPP
}
// weightedMean
NumericVector weightedMean(NumericMatrix particles, NumericVector log_weights);
RcppExport SEXP _serrsBayes_weightedMean(SEXP particlesSEXP, SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type particles(particlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedMean(particles, log_weights));
    return rcpp_result_gen;
END_RCPP
}
// weightedVariance
NumericVector weightedVariance(NumericMatrix particles, NumericVector log_weights, NumericVector mean);
RcppExport SEXP _serrsBayes_weightedVariance(SEXP particlesSEXP, SEXP log_weightsSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type particles(particlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_weights(log_weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedVariance(particles, log_weights, mean));
    return rcpp_result_gen;
END_RCPP
}
// weightedGaussian
Eigen::VectorXd weightedGaussian(Eigen::VectorXd location, Eigen::VectorXd scale, Eigen::VectorXd amplitude, Eigen::VectorXd wavelengths);
RcppExport SEXP _serrsBayes_weightedGaussian(SEXP locationSEXP, SEXP scaleSEXP, SEXP amplitudeSEXP, SEXP wavelengthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type location(locationSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wavelengths(wavelengthsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedGaussian(location, scale, amplitude, wavelengths));
    return rcpp_result_gen;
END_RCPP
}
// marginalMetropolisUpdate
long marginalMetropolisUpdate(Eigen::MatrixXd spectra, unsigned n, Eigen::VectorXd conc, Eigen::VectorXd wavelengths, Eigen::VectorXd peakWL, NumericMatrix betaMx, NumericMatrix scaleMx, NumericVector sigma, NumericMatrix expMx, NumericVector baselines, Eigen::VectorXd sd_mh, List priors);
RcppExport SEXP _serrsBayes_marginalMetropolisUpdate(SEXP spectraSEXP, SEXP nSEXP, SEXP concSEXP, SEXP wavelengthsSEXP, SEXP peakWLSEXP, SEXP betaMxSEXP, SEXP scaleMxSEXP, SEXP sigmaSEXP, SEXP expMxSEXP, SEXP baselinesSEXP, SEXP sd_mhSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type conc(concSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wavelengths(wavelengthsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type peakWL(peakWLSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type betaMx(betaMxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type scaleMx(scaleMxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type expMx(expMxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sd_mh(sd_mhSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(marginalMetropolisUpdate(spectra, n, conc, wavelengths, peakWL, betaMx, scaleMx, sigma, expMx, baselines, sd_mh, priors));
    return rcpp_result_gen;
END_RCPP
}
// sumDnorm
double sumDnorm(Eigen::VectorXd x, Eigen::VectorXd mean, Eigen::VectorXd sd);
RcppExport SEXP _serrsBayes_sumDnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(sumDnorm(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// sumDlogNorm
double sumDlogNorm(Eigen::VectorXd x, double meanlog, double sdlog);
RcppExport SEXP _serrsBayes_sumDlogNorm(SEXP xSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< double >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(sumDlogNorm(x, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// mixedVoigt
Eigen::VectorXd mixedVoigt(Eigen::VectorXd location, Eigen::VectorXd scale_G, Eigen::VectorXd scale_L, Eigen::VectorXd amplitude, Eigen::VectorXd wavenum);
RcppExport SEXP _serrsBayes_mixedVoigt(SEXP locationSEXP, SEXP scale_GSEXP, SEXP scale_LSEXP, SEXP amplitudeSEXP, SEXP wavenumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type location(locationSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale_G(scale_GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale_L(scale_LSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wavenum(wavenumSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedVoigt(location, scale_G, scale_L, amplitude, wavenum));
    return rcpp_result_gen;
END_RCPP
}
// getVoigtParam
Eigen::VectorXd getVoigtParam(Eigen::VectorXd scale_G, Eigen::VectorXd scale_L);
RcppExport SEXP _serrsBayes_getVoigtParam(SEXP scale_GSEXP, SEXP scale_LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale_G(scale_GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale_L(scale_LSEXP);
    rcpp_result_gen = Rcpp::wrap(getVoigtParam(scale_G, scale_L));
    return rcpp_result_gen;
END_RCPP
}
// copyLogProposals
Eigen::VectorXd copyLogProposals(int nPK, Eigen::VectorXd T_Prop_Theta);
RcppExport SEXP _serrsBayes_copyLogProposals(SEXP nPKSEXP, SEXP T_Prop_ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nPK(nPKSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type T_Prop_Theta(T_Prop_ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(copyLogProposals(nPK, T_Prop_Theta));
    return rcpp_result_gen;
END_RCPP
}
// computeLogLikelihood
double computeLogLikelihood(Eigen::VectorXd obsi, double lambda, double prErrNu, double prErrSS, Eigen::MatrixXd basisMx, Eigen::VectorXd eigVal, Eigen::SparseMatrix<double> precMx, Eigen::SparseMatrix<double> xTx, Eigen::MatrixXd aMx, Eigen::MatrixXd ruMx);
RcppExport SEXP _serrsBayes_computeLogLikelihood(SEXP obsiSEXP, SEXP lambdaSEXP, SEXP prErrNuSEXP, SEXP prErrSSSEXP, SEXP basisMxSEXP, SEXP eigValSEXP, SEXP precMxSEXP, SEXP xTxSEXP, SEXP aMxSEXP, SEXP ruMxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type obsi(obsiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type prErrNu(prErrNuSEXP);
    Rcpp::traits::input_parameter< double >::type prErrSS(prErrSSSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type basisMx(basisMxSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type eigVal(eigValSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type precMx(precMxSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type xTx(xTxSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type aMx(aMxSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ruMx(ruMxSEXP);
    rcpp_result_gen = Rcpp::wrap(computeLogLikelihood(obsi, lambda, prErrNu, prErrSS, basisMx, eigVal, precMx, xTx, aMx, ruMx));
    return rcpp_result_gen;
END_RCPP
}
// mhUpdateVoigt
long mhUpdateVoigt(Eigen::MatrixXd spectra, unsigned n, double kappa, Eigen::VectorXd conc, Eigen::VectorXd wavenum, NumericMatrix thetaMx, NumericMatrix logThetaMx, Eigen::MatrixXd mhChol, List priors);
RcppExport SEXP _serrsBayes_mhUpdateVoigt(SEXP spectraSEXP, SEXP nSEXP, SEXP kappaSEXP, SEXP concSEXP, SEXP wavenumSEXP, SEXP thetaMxSEXP, SEXP logThetaMxSEXP, SEXP mhCholSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type conc(concSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type wavenum(wavenumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thetaMx(thetaMxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type logThetaMx(logThetaMxSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mhChol(mhCholSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(mhUpdateVoigt(spectra, n, kappa, conc, wavenum, thetaMx, logThetaMx, mhChol, priors));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_serrsBayes_weightedLorentzian", (DL_FUNC) &_serrsBayes_weightedLorentzian, 4},
    {"_serrsBayes_effectiveSampleSize", (DL_FUNC) &_serrsBayes_effectiveSampleSize, 1},
    {"_serrsBayes_reWeightParticles", (DL_FUNC) &_serrsBayes_reWeightParticles, 9},
    {"_serrsBayes_residualResampling", (DL_FUNC) &_serrsBayes_residualResampling, 1},
    {"_serrsBayes_resampleParticles", (DL_FUNC) &_serrsBayes_resampleParticles, 7},
    {"_serrsBayes_weightedMean", (DL_FUNC) &_serrsBayes_weightedMean, 2},
    {"_serrsBayes_weightedVariance", (DL_FUNC) &_serrsBayes_weightedVariance, 3},
    {"_serrsBayes_weightedGaussian", (DL_FUNC) &_serrsBayes_weightedGaussian, 4},
    {"_serrsBayes_marginalMetropolisUpdate", (DL_FUNC) &_serrsBayes_marginalMetropolisUpdate, 12},
    {"_serrsBayes_sumDnorm", (DL_FUNC) &_serrsBayes_sumDnorm, 3},
    {"_serrsBayes_sumDlogNorm", (DL_FUNC) &_serrsBayes_sumDlogNorm, 3},
    {"_serrsBayes_mixedVoigt", (DL_FUNC) &_serrsBayes_mixedVoigt, 5},
    {"_serrsBayes_getVoigtParam", (DL_FUNC) &_serrsBayes_getVoigtParam, 2},
    {"_serrsBayes_copyLogProposals", (DL_FUNC) &_serrsBayes_copyLogProposals, 2},
    {"_serrsBayes_computeLogLikelihood", (DL_FUNC) &_serrsBayes_computeLogLikelihood, 10},
    {"_serrsBayes_mhUpdateVoigt", (DL_FUNC) &_serrsBayes_mhUpdateVoigt, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_serrsBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
