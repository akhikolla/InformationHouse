// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Sum_C
double Sum_C(NumericVector x);
RcppExport SEXP _BoostMLR_Sum_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Sum_C_NA
double Sum_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Sum_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Sum_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// length_C_NA
int length_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_length_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(length_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Mean_C
double Mean_C(NumericVector x);
RcppExport SEXP _BoostMLR_Mean_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Mean_C_NA
double Mean_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Mean_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_C
IntegerVector Which_C(double x, NumericVector x_set);
RcppExport SEXP _BoostMLR_Which_C(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_C(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Which_C_NA
IntegerVector Which_C_NA(double x, NumericVector x_set);
RcppExport SEXP _BoostMLR_Which_C_NA(SEXP xSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_C_NA(x, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_C
int Which_Min_C(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Min_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Min_C_NA
int Which_Min_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Min_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Min_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_C
int Which_Max_C(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Max_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_C_NA
int Which_Max_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_Which_Max_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// StdVar_C
List StdVar_C(NumericMatrix MyMat);
RcppExport SEXP _BoostMLR_StdVar_C(SEXP MyMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MyMat(MyMatSEXP);
    rcpp_result_gen = Rcpp::wrap(StdVar_C(MyMat));
    return rcpp_result_gen;
END_RCPP
}
// StdVar_C_NA
List StdVar_C_NA(NumericMatrix MyMat);
RcppExport SEXP _BoostMLR_StdVar_C_NA(SEXP MyMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MyMat(MyMatSEXP);
    rcpp_result_gen = Rcpp::wrap(StdVar_C_NA(MyMat));
    return rcpp_result_gen;
END_RCPP
}
// Match_C
IntegerVector Match_C(NumericVector x_subset, NumericVector x_set);
RcppExport SEXP _BoostMLR_Match_C(SEXP x_subsetSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_subset(x_subsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Match_C(x_subset, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Match_C_NA
IntegerVector Match_C_NA(NumericVector x_subset, NumericVector x_set);
RcppExport SEXP _BoostMLR_Match_C_NA(SEXP x_subsetSEXP, SEXP x_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_subset(x_subsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_set(x_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Match_C_NA(x_subset, x_set));
    return rcpp_result_gen;
END_RCPP
}
// Approx_Match_C
IntegerVector Approx_Match_C(NumericVector x, NumericVector y);
RcppExport SEXP _BoostMLR_Approx_Match_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Approx_Match_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Approx_Match_C_NA
IntegerVector Approx_Match_C_NA(NumericVector x, NumericVector y);
RcppExport SEXP _BoostMLR_Approx_Match_C_NA(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Approx_Match_C_NA(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Diag_Matrix_C
NumericMatrix Diag_Matrix_C(NumericVector x);
RcppExport SEXP _BoostMLR_Diag_Matrix_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Diag_Matrix_C(x));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Sum_C
NumericMatrix Matrix_Sum_C(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _BoostMLR_Matrix_Sum_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Sum_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Sum_C_NA
NumericMatrix Matrix_Sum_C_NA(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _BoostMLR_Matrix_Sum_C_NA(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Sum_C_NA(x, y));
    return rcpp_result_gen;
END_RCPP
}
// l2Dist_Vector_C
double l2Dist_Vector_C(NumericVector x1, NumericVector x2, List ID);
RcppExport SEXP _BoostMLR_l2Dist_Vector_C(SEXP x1SEXP, SEXP x2SEXP, SEXP IDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< List >::type ID(IDSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Dist_Vector_C(x1, x2, ID));
    return rcpp_result_gen;
END_RCPP
}
// l2Dist_Vector_C_NA
double l2Dist_Vector_C_NA(NumericVector x1, NumericVector x2, List ID);
RcppExport SEXP _BoostMLR_l2Dist_Vector_C_NA(SEXP x1SEXP, SEXP x2SEXP, SEXP IDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< List >::type ID(IDSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Dist_Vector_C_NA(x1, x2, ID));
    return rcpp_result_gen;
END_RCPP
}
// randomShuffle
Rcpp::NumericVector randomShuffle(Rcpp::NumericVector a);
RcppExport SEXP _BoostMLR_randomShuffle(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(randomShuffle(a));
    return rcpp_result_gen;
END_RCPP
}
// int_randomShuffle
Rcpp::IntegerVector int_randomShuffle(Rcpp::IntegerVector a);
RcppExport SEXP _BoostMLR_int_randomShuffle(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(int_randomShuffle(a));
    return rcpp_result_gen;
END_RCPP
}
// RemoveNA
NumericVector RemoveNA(NumericVector x);
RcppExport SEXP _BoostMLR_RemoveNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RemoveNA(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort
NumericVector stl_sort(NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_NA
NumericVector stl_sort_NA(NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_reverse
Rcpp::NumericVector stl_sort_reverse(Rcpp::NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_reverse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_reverse(x));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort_reverse_NA
Rcpp::NumericVector stl_sort_reverse_NA(Rcpp::NumericVector x);
RcppExport SEXP _BoostMLR_stl_sort_reverse_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort_reverse_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_C
NumericVector sort_unique_C(NumericVector x);
RcppExport SEXP _BoostMLR_sort_unique_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_C(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_C_NA
NumericVector sort_unique_C_NA(NumericVector x);
RcppExport SEXP _BoostMLR_sort_unique_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_Matrix
IntegerVector Which_Max_Matrix(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Max_Matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_Matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// Which_Max_Matrix_NA
IntegerVector Which_Max_Matrix_NA(NumericMatrix x);
RcppExport SEXP _BoostMLR_Which_Max_Matrix_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Which_Max_Matrix_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_C
NumericVector rowSums_C(NumericMatrix x);
RcppExport SEXP _BoostMLR_rowSums_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_C(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_C_NA
NumericVector rowSums_C_NA(NumericMatrix x);
RcppExport SEXP _BoostMLR_rowSums_C_NA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_C_NA(x));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(IntegerVector x);
RcppExport SEXP _BoostMLR_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// Rho_Inv_C
double Rho_Inv_C(double Rho_Value, double N_Value);
RcppExport SEXP _BoostMLR_Rho_Inv_C(SEXP Rho_ValueSEXP, SEXP N_ValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rho_Value(Rho_ValueSEXP);
    Rcpp::traits::input_parameter< double >::type N_Value(N_ValueSEXP);
    rcpp_result_gen = Rcpp::wrap(Rho_Inv_C(Rho_Value, N_Value));
    return rcpp_result_gen;
END_RCPP
}
// MatrixInversion_Equicorrelation_C
arma::mat MatrixInversion_Equicorrelation_C(int N_Value, double phi, double rho);
RcppExport SEXP _BoostMLR_MatrixInversion_Equicorrelation_C(SEXP N_ValueSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_Value(N_ValueSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixInversion_Equicorrelation_C(N_Value, phi, rho));
    return rcpp_result_gen;
END_RCPP
}
// Matrix_Vector_Multiplication_C
NumericVector Matrix_Vector_Multiplication_C(NumericVector x, arma::mat y);
RcppExport SEXP _BoostMLR_Matrix_Vector_Multiplication_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Matrix_Vector_Multiplication_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// DataProcessing_C
List DataProcessing_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, bool x_miss);
RcppExport SEXP _BoostMLR_DataProcessing_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP x_missSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< bool >::type x_miss(x_missSEXP);
    rcpp_result_gen = Rcpp::wrap(DataProcessing_C(Org_x, Org_y, id, tm, x_miss));
    return rcpp_result_gen;
END_RCPP
}
// BoostMLR_C
List BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, NumericMatrix x, NumericMatrix y, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, int n, int K, int L, int H, IntegerVector Dk, IntegerVector ni, int N, NumericVector unq_id, NumericVector unq_tm, List unq_x, List id_index, NumericMatrix Bt, List Bx, List Bx_Scale, NumericMatrix Time_Add_New, LogicalVector Time_Unmatch, double nu, int M, bool Mod_Grad, LogicalVector UseRaw, NumericVector Lambda_Ridge_Vec, bool Ridge_Penalty, bool Shrink, double lower_perc, double upper_perc, double Lambda_Scale, int NLambda, bool VarFlag, NumericVector rho, NumericVector phi, bool Verbose);
RcppExport SEXP _BoostMLR_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP nSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP DkSEXP, SEXP niSEXP, SEXP NSEXP, SEXP unq_idSEXP, SEXP unq_tmSEXP, SEXP unq_xSEXP, SEXP id_indexSEXP, SEXP BtSEXP, SEXP BxSEXP, SEXP Bx_ScaleSEXP, SEXP Time_Add_NewSEXP, SEXP Time_UnmatchSEXP, SEXP nuSEXP, SEXP MSEXP, SEXP Mod_GradSEXP, SEXP UseRawSEXP, SEXP Lambda_Ridge_VecSEXP, SEXP Ridge_PenaltySEXP, SEXP ShrinkSEXP, SEXP lower_percSEXP, SEXP upper_percSEXP, SEXP Lambda_ScaleSEXP, SEXP NLambdaSEXP, SEXP VarFlagSEXP, SEXP rhoSEXP, SEXP phiSEXP, SEXP VerboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_Scale(Bx_ScaleSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Time_Add_New(Time_Add_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type Time_Unmatch(Time_UnmatchSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type Mod_Grad(Mod_GradSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda_Ridge_Vec(Lambda_Ridge_VecSEXP);
    Rcpp::traits::input_parameter< bool >::type Ridge_Penalty(Ridge_PenaltySEXP);
    Rcpp::traits::input_parameter< bool >::type Shrink(ShrinkSEXP);
    Rcpp::traits::input_parameter< double >::type lower_perc(lower_percSEXP);
    Rcpp::traits::input_parameter< double >::type upper_perc(upper_percSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda_Scale(Lambda_ScaleSEXP);
    Rcpp::traits::input_parameter< int >::type NLambda(NLambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type VarFlag(VarFlagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type Verbose(VerboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BoostMLR_C(Org_x, Org_y, id, tm, x, y, x_Mean, x_Std_Error, y_Mean, y_Std_Error, n, K, L, H, Dk, ni, N, unq_id, unq_tm, unq_x, id_index, Bt, Bx, Bx_Scale, Time_Add_New, Time_Unmatch, nu, M, Mod_Grad, UseRaw, Lambda_Ridge_Vec, Ridge_Penalty, Shrink, lower_perc, upper_perc, Lambda_Scale, NLambda, VarFlag, rho, phi, Verbose));
    return rcpp_result_gen;
END_RCPP
}
// update_BoostMLR_C
List update_BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector id, NumericVector tm, NumericMatrix x, NumericMatrix y, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, int n, int K, int L, int H, IntegerVector Dk, IntegerVector ni, int N, NumericVector unq_id, NumericVector unq_tm, List unq_x, List id_index, List tm_index, List x_index, NumericMatrix Bt, List Bx, List Bt_H, List Bx_K, List Bxt, List Bx_Scale, double nu, int M, int M_New, LogicalVector UseRaw, bool Shrink, bool Ridge_Penalty, NumericVector Lambda_Ridge_Vec, double Lambda_Scale, int NLambda, double lower_perc, double upper_perc, List Lambda_List, NumericMatrix mu, List mu_List, NumericMatrix mu_zero, NumericVector Vec_zero, NumericMatrix Error_Rate, IntegerMatrix Variable_Select, IntegerMatrix Response_Select, List Beta_Hat_List, List Sum_Beta_Hat_List, List Beta, List Beta_Hat_List_Iter, List lower_Beta_Hat_Noise, List upper_Beta_Hat_Noise, List List_Trace_Bxt_gm, bool Mod_Grad, bool VarFlag, NumericVector phi, NumericVector rho, NumericMatrix Phi, NumericMatrix Rho, bool Verbose);
RcppExport SEXP _BoostMLR_update_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP idSEXP, SEXP tmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP nSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP DkSEXP, SEXP niSEXP, SEXP NSEXP, SEXP unq_idSEXP, SEXP unq_tmSEXP, SEXP unq_xSEXP, SEXP id_indexSEXP, SEXP tm_indexSEXP, SEXP x_indexSEXP, SEXP BtSEXP, SEXP BxSEXP, SEXP Bt_HSEXP, SEXP Bx_KSEXP, SEXP BxtSEXP, SEXP Bx_ScaleSEXP, SEXP nuSEXP, SEXP MSEXP, SEXP M_NewSEXP, SEXP UseRawSEXP, SEXP ShrinkSEXP, SEXP Ridge_PenaltySEXP, SEXP Lambda_Ridge_VecSEXP, SEXP Lambda_ScaleSEXP, SEXP NLambdaSEXP, SEXP lower_percSEXP, SEXP upper_percSEXP, SEXP Lambda_ListSEXP, SEXP muSEXP, SEXP mu_ListSEXP, SEXP mu_zeroSEXP, SEXP Vec_zeroSEXP, SEXP Error_RateSEXP, SEXP Variable_SelectSEXP, SEXP Response_SelectSEXP, SEXP Beta_Hat_ListSEXP, SEXP Sum_Beta_Hat_ListSEXP, SEXP BetaSEXP, SEXP Beta_Hat_List_IterSEXP, SEXP lower_Beta_Hat_NoiseSEXP, SEXP upper_Beta_Hat_NoiseSEXP, SEXP List_Trace_Bxt_gmSEXP, SEXP Mod_GradSEXP, SEXP VarFlagSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP PhiSEXP, SEXP RhoSEXP, SEXP VerboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_id(unq_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< List >::type tm_index(tm_indexSEXP);
    Rcpp::traits::input_parameter< List >::type x_index(x_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bt_H(Bt_HSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_K(Bx_KSEXP);
    Rcpp::traits::input_parameter< List >::type Bxt(BxtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_Scale(Bx_ScaleSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M_New(M_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< bool >::type Shrink(ShrinkSEXP);
    Rcpp::traits::input_parameter< bool >::type Ridge_Penalty(Ridge_PenaltySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lambda_Ridge_Vec(Lambda_Ridge_VecSEXP);
    Rcpp::traits::input_parameter< double >::type Lambda_Scale(Lambda_ScaleSEXP);
    Rcpp::traits::input_parameter< int >::type NLambda(NLambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lower_perc(lower_percSEXP);
    Rcpp::traits::input_parameter< double >::type upper_perc(upper_percSEXP);
    Rcpp::traits::input_parameter< List >::type Lambda_List(Lambda_ListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type mu_List(mu_ListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_zero(mu_zeroSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Vec_zero(Vec_zeroSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Error_Rate(Error_RateSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Variable_Select(Variable_SelectSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Response_Select(Response_SelectSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< List >::type Sum_Beta_Hat_List(Sum_Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< List >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List_Iter(Beta_Hat_List_IterSEXP);
    Rcpp::traits::input_parameter< List >::type lower_Beta_Hat_Noise(lower_Beta_Hat_NoiseSEXP);
    Rcpp::traits::input_parameter< List >::type upper_Beta_Hat_Noise(upper_Beta_Hat_NoiseSEXP);
    Rcpp::traits::input_parameter< List >::type List_Trace_Bxt_gm(List_Trace_Bxt_gmSEXP);
    Rcpp::traits::input_parameter< bool >::type Mod_Grad(Mod_GradSEXP);
    Rcpp::traits::input_parameter< bool >::type VarFlag(VarFlagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Rho(RhoSEXP);
    Rcpp::traits::input_parameter< bool >::type Verbose(VerboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_BoostMLR_C(Org_x, Org_y, id, tm, x, y, x_Mean, x_Std_Error, y_Mean, y_Std_Error, n, K, L, H, Dk, ni, N, unq_id, unq_tm, unq_x, id_index, tm_index, x_index, Bt, Bx, Bt_H, Bx_K, Bxt, Bx_Scale, nu, M, M_New, UseRaw, Shrink, Ridge_Penalty, Lambda_Ridge_Vec, Lambda_Scale, NLambda, lower_perc, upper_perc, Lambda_List, mu, mu_List, mu_zero, Vec_zero, Error_Rate, Variable_Select, Response_Select, Beta_Hat_List, Sum_Beta_Hat_List, Beta, Beta_Hat_List_Iter, lower_Beta_Hat_Noise, upper_Beta_Hat_Noise, List_Trace_Bxt_gm, Mod_Grad, VarFlag, phi, rho, Phi, Rho, Verbose));
    return rcpp_result_gen;
END_RCPP
}
// predict_BoostMLR_C
List predict_BoostMLR_C(NumericMatrix Org_x, NumericVector tm, NumericVector id, NumericMatrix Org_y, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, int K, int L, int H, IntegerVector Dk, NumericVector unq_tm, List unq_x, NumericMatrix Bt, List Bx, LogicalVector UseRaw, NumericMatrix Time_Add_New, LogicalVector Time_Unmatch, List Beta, List Beta_Hat_List, bool testFlag, int M, double nu, bool Time_Varying, bool vimpFlag, bool vimpFlag_Coef, double eps);
RcppExport SEXP _BoostMLR_predict_BoostMLR_C(SEXP Org_xSEXP, SEXP tmSEXP, SEXP idSEXP, SEXP Org_ySEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP KSEXP, SEXP LSEXP, SEXP HSEXP, SEXP DkSEXP, SEXP unq_tmSEXP, SEXP unq_xSEXP, SEXP BtSEXP, SEXP BxSEXP, SEXP UseRawSEXP, SEXP Time_Add_NewSEXP, SEXP Time_UnmatchSEXP, SEXP BetaSEXP, SEXP Beta_Hat_ListSEXP, SEXP testFlagSEXP, SEXP MSEXP, SEXP nuSEXP, SEXP Time_VaryingSEXP, SEXP vimpFlagSEXP, SEXP vimpFlag_CoefSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unq_tm(unq_tmSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x(unq_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Time_Add_New(Time_Add_NewSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type Time_Unmatch(Time_UnmatchSEXP);
    Rcpp::traits::input_parameter< List >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< bool >::type testFlag(testFlagSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type Time_Varying(Time_VaryingSEXP);
    Rcpp::traits::input_parameter< bool >::type vimpFlag(vimpFlagSEXP);
    Rcpp::traits::input_parameter< bool >::type vimpFlag_Coef(vimpFlag_CoefSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_BoostMLR_C(Org_x, tm, id, Org_y, x_Mean, x_Std_Error, y_Mean, y_Std_Error, K, L, H, Dk, unq_tm, unq_x, Bt, Bx, UseRaw, Time_Add_New, Time_Unmatch, Beta, Beta_Hat_List, testFlag, M, nu, Time_Varying, vimpFlag, vimpFlag_Coef, eps));
    return rcpp_result_gen;
END_RCPP
}
// vimp_BoostMLR_C
List vimp_BoostMLR_C(NumericMatrix Org_x, NumericMatrix Org_y, NumericVector tm, NumericVector id, NumericVector x_Mean, NumericVector x_Std_Error, NumericVector y_Mean, NumericVector y_Std_Error, int n, IntegerVector ni, int N, int L, int K, int p, int H, IntegerVector Dk, int n_unq_tm, LogicalVector UseRaw, List id_index, List tm_index, List unq_x_New, IntegerVector Index_Bt, IntegerVector vimp_set, bool joint, NumericMatrix Bt, List Bt_H, List Bx, List Bxt, List Bx_K, List Beta_Hat_List, IntegerVector Mopt, double nu, NumericVector rmse, bool Time_Varying, NumericVector Vec_zero, NumericMatrix mu_zero_vec);
RcppExport SEXP _BoostMLR_vimp_BoostMLR_C(SEXP Org_xSEXP, SEXP Org_ySEXP, SEXP tmSEXP, SEXP idSEXP, SEXP x_MeanSEXP, SEXP x_Std_ErrorSEXP, SEXP y_MeanSEXP, SEXP y_Std_ErrorSEXP, SEXP nSEXP, SEXP niSEXP, SEXP NSEXP, SEXP LSEXP, SEXP KSEXP, SEXP pSEXP, SEXP HSEXP, SEXP DkSEXP, SEXP n_unq_tmSEXP, SEXP UseRawSEXP, SEXP id_indexSEXP, SEXP tm_indexSEXP, SEXP unq_x_NewSEXP, SEXP Index_BtSEXP, SEXP vimp_setSEXP, SEXP jointSEXP, SEXP BtSEXP, SEXP Bt_HSEXP, SEXP BxSEXP, SEXP BxtSEXP, SEXP Bx_KSEXP, SEXP Beta_Hat_ListSEXP, SEXP MoptSEXP, SEXP nuSEXP, SEXP rmseSEXP, SEXP Time_VaryingSEXP, SEXP Vec_zeroSEXP, SEXP mu_zero_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_x(Org_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Org_y(Org_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Mean(x_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_Std_Error(x_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Mean(y_MeanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_Std_Error(y_Std_ErrorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ni(niSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< int >::type n_unq_tm(n_unq_tmSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type UseRaw(UseRawSEXP);
    Rcpp::traits::input_parameter< List >::type id_index(id_indexSEXP);
    Rcpp::traits::input_parameter< List >::type tm_index(tm_indexSEXP);
    Rcpp::traits::input_parameter< List >::type unq_x_New(unq_x_NewSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Index_Bt(Index_BtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vimp_set(vimp_setSEXP);
    Rcpp::traits::input_parameter< bool >::type joint(jointSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< List >::type Bt_H(Bt_HSEXP);
    Rcpp::traits::input_parameter< List >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< List >::type Bxt(BxtSEXP);
    Rcpp::traits::input_parameter< List >::type Bx_K(Bx_KSEXP);
    Rcpp::traits::input_parameter< List >::type Beta_Hat_List(Beta_Hat_ListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Mopt(MoptSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rmse(rmseSEXP);
    Rcpp::traits::input_parameter< bool >::type Time_Varying(Time_VaryingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Vec_zero(Vec_zeroSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_zero_vec(mu_zero_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vimp_BoostMLR_C(Org_x, Org_y, tm, id, x_Mean, x_Std_Error, y_Mean, y_Std_Error, n, ni, N, L, K, p, H, Dk, n_unq_tm, UseRaw, id_index, tm_index, unq_x_New, Index_Bt, vimp_set, joint, Bt, Bt_H, Bx, Bxt, Bx_K, Beta_Hat_List, Mopt, nu, rmse, Time_Varying, Vec_zero, mu_zero_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BoostMLR_Sum_C", (DL_FUNC) &_BoostMLR_Sum_C, 1},
    {"_BoostMLR_Sum_C_NA", (DL_FUNC) &_BoostMLR_Sum_C_NA, 1},
    {"_BoostMLR_length_C_NA", (DL_FUNC) &_BoostMLR_length_C_NA, 1},
    {"_BoostMLR_Mean_C", (DL_FUNC) &_BoostMLR_Mean_C, 1},
    {"_BoostMLR_Mean_C_NA", (DL_FUNC) &_BoostMLR_Mean_C_NA, 1},
    {"_BoostMLR_Which_C", (DL_FUNC) &_BoostMLR_Which_C, 2},
    {"_BoostMLR_Which_C_NA", (DL_FUNC) &_BoostMLR_Which_C_NA, 2},
    {"_BoostMLR_Which_Min_C", (DL_FUNC) &_BoostMLR_Which_Min_C, 1},
    {"_BoostMLR_Which_Min_C_NA", (DL_FUNC) &_BoostMLR_Which_Min_C_NA, 1},
    {"_BoostMLR_Which_Max_C", (DL_FUNC) &_BoostMLR_Which_Max_C, 1},
    {"_BoostMLR_Which_Max_C_NA", (DL_FUNC) &_BoostMLR_Which_Max_C_NA, 1},
    {"_BoostMLR_StdVar_C", (DL_FUNC) &_BoostMLR_StdVar_C, 1},
    {"_BoostMLR_StdVar_C_NA", (DL_FUNC) &_BoostMLR_StdVar_C_NA, 1},
    {"_BoostMLR_Match_C", (DL_FUNC) &_BoostMLR_Match_C, 2},
    {"_BoostMLR_Match_C_NA", (DL_FUNC) &_BoostMLR_Match_C_NA, 2},
    {"_BoostMLR_Approx_Match_C", (DL_FUNC) &_BoostMLR_Approx_Match_C, 2},
    {"_BoostMLR_Approx_Match_C_NA", (DL_FUNC) &_BoostMLR_Approx_Match_C_NA, 2},
    {"_BoostMLR_Diag_Matrix_C", (DL_FUNC) &_BoostMLR_Diag_Matrix_C, 1},
    {"_BoostMLR_Matrix_Sum_C", (DL_FUNC) &_BoostMLR_Matrix_Sum_C, 2},
    {"_BoostMLR_Matrix_Sum_C_NA", (DL_FUNC) &_BoostMLR_Matrix_Sum_C_NA, 2},
    {"_BoostMLR_l2Dist_Vector_C", (DL_FUNC) &_BoostMLR_l2Dist_Vector_C, 3},
    {"_BoostMLR_l2Dist_Vector_C_NA", (DL_FUNC) &_BoostMLR_l2Dist_Vector_C_NA, 3},
    {"_BoostMLR_randomShuffle", (DL_FUNC) &_BoostMLR_randomShuffle, 1},
    {"_BoostMLR_int_randomShuffle", (DL_FUNC) &_BoostMLR_int_randomShuffle, 1},
    {"_BoostMLR_RemoveNA", (DL_FUNC) &_BoostMLR_RemoveNA, 1},
    {"_BoostMLR_stl_sort", (DL_FUNC) &_BoostMLR_stl_sort, 1},
    {"_BoostMLR_stl_sort_NA", (DL_FUNC) &_BoostMLR_stl_sort_NA, 1},
    {"_BoostMLR_stl_sort_reverse", (DL_FUNC) &_BoostMLR_stl_sort_reverse, 1},
    {"_BoostMLR_stl_sort_reverse_NA", (DL_FUNC) &_BoostMLR_stl_sort_reverse_NA, 1},
    {"_BoostMLR_sort_unique_C", (DL_FUNC) &_BoostMLR_sort_unique_C, 1},
    {"_BoostMLR_sort_unique_C_NA", (DL_FUNC) &_BoostMLR_sort_unique_C_NA, 1},
    {"_BoostMLR_Which_Max_Matrix", (DL_FUNC) &_BoostMLR_Which_Max_Matrix, 1},
    {"_BoostMLR_Which_Max_Matrix_NA", (DL_FUNC) &_BoostMLR_Which_Max_Matrix_NA, 1},
    {"_BoostMLR_rowSums_C", (DL_FUNC) &_BoostMLR_rowSums_C, 1},
    {"_BoostMLR_rowSums_C_NA", (DL_FUNC) &_BoostMLR_rowSums_C_NA, 1},
    {"_BoostMLR_isNA", (DL_FUNC) &_BoostMLR_isNA, 1},
    {"_BoostMLR_Rho_Inv_C", (DL_FUNC) &_BoostMLR_Rho_Inv_C, 2},
    {"_BoostMLR_MatrixInversion_Equicorrelation_C", (DL_FUNC) &_BoostMLR_MatrixInversion_Equicorrelation_C, 3},
    {"_BoostMLR_Matrix_Vector_Multiplication_C", (DL_FUNC) &_BoostMLR_Matrix_Vector_Multiplication_C, 2},
    {"_BoostMLR_DataProcessing_C", (DL_FUNC) &_BoostMLR_DataProcessing_C, 5},
    {"_BoostMLR_BoostMLR_C", (DL_FUNC) &_BoostMLR_BoostMLR_C, 41},
    {"_BoostMLR_update_BoostMLR_C", (DL_FUNC) &_BoostMLR_update_BoostMLR_C, 62},
    {"_BoostMLR_predict_BoostMLR_C", (DL_FUNC) &_BoostMLR_predict_BoostMLR_C, 28},
    {"_BoostMLR_vimp_BoostMLR_C", (DL_FUNC) &_BoostMLR_vimp_BoostMLR_C, 36},
    {NULL, NULL, 0}
};

RcppExport void R_init_BoostMLR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
