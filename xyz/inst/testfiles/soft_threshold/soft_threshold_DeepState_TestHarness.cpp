// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// soft_threshold_DeepState_TestHarness_generation.cpp and soft_threshold_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double soft_threshold(double beta_tilde, double normalization, double lambda, double alpha);

TEST(xyz_deepstate_test,soft_threshold_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector beta_tilde(1);
  beta_tilde[0]  = RcppDeepState_double();
  qs::c_qsave(beta_tilde,"/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/soft_threshold/inputs/beta_tilde.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta_tilde values: "<< beta_tilde << std::endl;
  NumericVector normalization(1);
  normalization[0]  = RcppDeepState_double();
  qs::c_qsave(normalization,"/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/soft_threshold/inputs/normalization.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "normalization values: "<< normalization << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/soft_threshold/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/soft_threshold/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    soft_threshold(beta_tilde[0],normalization[0],lambda[0],alpha[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
