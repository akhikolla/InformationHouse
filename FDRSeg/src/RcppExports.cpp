// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// scalar_quantile
double scalar_quantile(double p, int n, int r);
RcppExport SEXP _FDRSeg_scalar_quantile(SEXP pSEXP, SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(scalar_quantile(p, n, r));
    return rcpp_result_gen;
END_RCPP
}
// vector_quantile
NumericVector vector_quantile(double p, int n, int r);
RcppExport SEXP _FDRSeg_vector_quantile(SEXP pSEXP, SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_quantile(p, n, r));
    return rcpp_result_gen;
END_RCPP
}
// mrstatvec_cpp
NumericVector mrstatvec_cpp(NumericVector Y);
RcppExport SEXP _FDRSeg_mrstatvec_cpp(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(mrstatvec_cpp(Y));
    return rcpp_result_gen;
END_RCPP
}
// dfdrseg_cpp
List dfdrseg_cpp(NumericVector Y, NumericVector q, NumericVector qm, double sd, int lag);
RcppExport SEXP _FDRSeg_dfdrseg_cpp(SEXP YSEXP, SEXP qSEXP, SEXP qmSEXP, SEXP sdSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qm(qmSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(dfdrseg_cpp(Y, q, qm, sd, lag));
    return rcpp_result_gen;
END_RCPP
}
// fdrseg_cpp
List fdrseg_cpp(NumericVector Y, NumericVector q, NumericVector qm, double sd);
RcppExport SEXP _FDRSeg_fdrseg_cpp(SEXP YSEXP, SEXP qSEXP, SEXP qmSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qm(qmSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fdrseg_cpp(Y, q, qm, sd));
    return rcpp_result_gen;
END_RCPP
}
// smuce_cpp
List smuce_cpp(NumericVector Y, double q, double sd);
RcppExport SEXP _FDRSeg_smuce_cpp(SEXP YSEXP, SEXP qSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(smuce_cpp(Y, q, sd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FDRSeg_scalar_quantile", (DL_FUNC) &_FDRSeg_scalar_quantile, 3},
    {"_FDRSeg_vector_quantile", (DL_FUNC) &_FDRSeg_vector_quantile, 3},
    {"_FDRSeg_mrstatvec_cpp", (DL_FUNC) &_FDRSeg_mrstatvec_cpp, 1},
    {"_FDRSeg_dfdrseg_cpp", (DL_FUNC) &_FDRSeg_dfdrseg_cpp, 5},
    {"_FDRSeg_fdrseg_cpp", (DL_FUNC) &_FDRSeg_fdrseg_cpp, 4},
    {"_FDRSeg_smuce_cpp", (DL_FUNC) &_FDRSeg_smuce_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FDRSeg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
