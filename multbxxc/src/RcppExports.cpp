// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/multbxxc.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mult_bxxc
void mult_bxxc(NumericVector a, List b, NumericVector c);
RcppExport SEXP _multbxxc_mult_bxxc(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    mult_bxxc(a, b, c);
    return R_NilValue;
END_RCPP
}
// solve_ieu
void solve_ieu(vec& invdt, const SEXP& x0_, mat& M, ListOf<RObject> ali, cube s, ivec& ilua);
RcppExport SEXP _multbxxc_solve_ieu(SEXP invdtSEXP, SEXP x0_SEXP, SEXP MSEXP, SEXP aliSEXP, SEXP sSEXP, SEXP iluaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type invdt(invdtSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type x0_(x0_SEXP);
    Rcpp::traits::input_parameter< mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< ListOf<RObject> >::type ali(aliSEXP);
    Rcpp::traits::input_parameter< cube >::type s(sSEXP);
    Rcpp::traits::input_parameter< ivec& >::type ilua(iluaSEXP);
    solve_ieu(invdt, x0_, M, ali, s, ilua);
    return R_NilValue;
END_RCPP
}
// match_ij
IntegerVector match_ij(IntegerVector ix, IntegerVector jx, IntegerVector ti, IntegerVector tj);
RcppExport SEXP _multbxxc_match_ij(SEXP ixSEXP, SEXP jxSEXP, SEXP tiSEXP, SEXP tjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type jx(jxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ti(tiSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tj(tjSEXP);
    rcpp_result_gen = Rcpp::wrap(match_ij(ix, jx, ti, tj));
    return rcpp_result_gen;
END_RCPP
}
// bop
void bop(NumericVector& dst, const IntegerVector& mv, const std::string& sop, NumericVector& src);
RcppExport SEXP _multbxxc_bop(SEXP dstSEXP, SEXP mvSEXP, SEXP sopSEXP, SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mv(mvSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type sop(sopSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type src(srcSEXP);
    bop(dst, mv, sop, src);
    return R_NilValue;
END_RCPP
}
// redim
void redim(NumericVector& x, uvec& di);
RcppExport SEXP _multbxxc_redim(SEXP xSEXP, SEXP diSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< uvec& >::type di(diSEXP);
    redim(x, di);
    return R_NilValue;
END_RCPP
}
// resize
void resize(SEXP& x_, uvec& di);
RcppExport SEXP _multbxxc_resize(SEXP x_SEXP, SEXP diSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< uvec& >::type di(diSEXP);
    resize(x_, di);
    return R_NilValue;
END_RCPP
}
// ij2ijv_i
List ij2ijv_i(IntegerVector& ir, IntegerVector& jc);
RcppExport SEXP _multbxxc_ij2ijv_i(SEXP irSEXP, SEXP jcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type ir(irSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type jc(jcSEXP);
    rcpp_result_gen = Rcpp::wrap(ij2ijv_i(ir, jc));
    return rcpp_result_gen;
END_RCPP
}
// iv2v
NumericVector iv2v(IntegerVector& iv, NumericVector& v);
RcppExport SEXP _multbxxc_iv2v(SEXP ivSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type iv(ivSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(iv2v(iv, v));
    return rcpp_result_gen;
END_RCPP
}
// mm_xpf
NumericVector mm_xpf(List x, NumericVector y_, IntegerVector lsel);
RcppExport SEXP _multbxxc_mm_xpf(SEXP xSEXP, SEXP y_SEXP, SEXP lselSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lsel(lselSEXP);
    rcpp_result_gen = Rcpp::wrap(mm_xpf(x, y_, lsel));
    return rcpp_result_gen;
END_RCPP
}
// jrhs_ff
void jrhs_ff(List jrhs, List ff, NumericVector xpfw);
RcppExport SEXP _multbxxc_jrhs_ff(SEXP jrhsSEXP, SEXP ffSEXP, SEXP xpfwSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type jrhs(jrhsSEXP);
    Rcpp::traits::input_parameter< List >::type ff(ffSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xpfw(xpfwSEXP);
    jrhs_ff(jrhs, ff, xpfw);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multbxxc_mult_bxxc", (DL_FUNC) &_multbxxc_mult_bxxc, 3},
    {"_multbxxc_solve_ieu", (DL_FUNC) &_multbxxc_solve_ieu, 6},
    {"_multbxxc_match_ij", (DL_FUNC) &_multbxxc_match_ij, 4},
    {"_multbxxc_bop", (DL_FUNC) &_multbxxc_bop, 4},
    {"_multbxxc_redim", (DL_FUNC) &_multbxxc_redim, 2},
    {"_multbxxc_resize", (DL_FUNC) &_multbxxc_resize, 2},
    {"_multbxxc_ij2ijv_i", (DL_FUNC) &_multbxxc_ij2ijv_i, 2},
    {"_multbxxc_iv2v", (DL_FUNC) &_multbxxc_iv2v, 2},
    {"_multbxxc_mm_xpf", (DL_FUNC) &_multbxxc_mm_xpf, 3},
    {"_multbxxc_jrhs_ff", (DL_FUNC) &_multbxxc_jrhs_ff, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_multbxxc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
