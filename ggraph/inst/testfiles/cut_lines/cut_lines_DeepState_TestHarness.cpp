// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cut_lines_DeepState_TestHarness_generation.cpp and cut_lines_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List cut_lines(NumericVector x, NumericVector y, IntegerVector id, NumericVector start_width, NumericVector start_height, NumericVector end_width, NumericVector end_height, CharacterVector start_type, CharacterVector end_type);

TEST(ggraph_deepstate_test,cut_lines_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  qs::c_qsave(y,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  IntegerVector id  = RcppDeepState_IntegerVector();
  qs::c_qsave(id,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/id.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "id values: "<< id << std::endl;
  NumericVector start_width  = RcppDeepState_NumericVector();
  qs::c_qsave(start_width,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/start_width.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start_width values: "<< start_width << std::endl;
  NumericVector start_height  = RcppDeepState_NumericVector();
  qs::c_qsave(start_height,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/start_height.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start_height values: "<< start_height << std::endl;
  NumericVector end_width  = RcppDeepState_NumericVector();
  qs::c_qsave(end_width,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/end_width.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end_width values: "<< end_width << std::endl;
  NumericVector end_height  = RcppDeepState_NumericVector();
  qs::c_qsave(end_height,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/end_height.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end_height values: "<< end_height << std::endl;
  CharacterVector start_type  = RcppDeepState_CharacterVector();
  qs::c_qsave(start_type,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/start_type.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start_type values: "<< start_type << std::endl;
  CharacterVector end_type  = RcppDeepState_CharacterVector();
  qs::c_qsave(end_type,"/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/cut_lines/inputs/end_type.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end_type values: "<< end_type << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cut_lines(x,y,id,start_width,start_height,end_width,end_height,start_type,end_type);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
