// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// find_non_reversed
LogicalVector find_non_reversed(CharacterMatrix x);
RcppExport SEXP _bnclassify_find_non_reversed(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_non_reversed(x));
    return rcpp_result_gen;
END_RCPP
}
// match_zero_based
std::vector<int> match_zero_based(const CharacterVector& subset, const CharacterVector& superset, const std::string error_message);
RcppExport SEXP _bnclassify_match_zero_based(SEXP subsetSEXP, SEXP supersetSEXP, SEXP error_messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type subset(subsetSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type superset(supersetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type error_message(error_messageSEXP);
    rcpp_result_gen = Rcpp::wrap(match_zero_based(subset, superset, error_message));
    return rcpp_result_gen;
END_RCPP
}
// ordersetdiff
std::vector<std::string> ordersetdiff(CharacterVector vector, CharacterVector remove);
RcppExport SEXP _bnclassify_ordersetdiff(SEXP vectorSEXP, SEXP removeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type remove(removeSEXP);
    rcpp_result_gen = Rcpp::wrap(ordersetdiff(vector, remove));
    return rcpp_result_gen;
END_RCPP
}
// are_disjoint
bool are_disjoint(Rcpp::Nullable<Rcpp::CharacterVector> x, Rcpp::Nullable<Rcpp::CharacterVector> y);
RcppExport SEXP _bnclassify_are_disjoint(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(are_disjoint(x, y));
    return rcpp_result_gen;
END_RCPP
}
// normalize
NumericVector normalize(NumericVector& x);
RcppExport SEXP _bnclassify_normalize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(x));
    return rcpp_result_gen;
END_RCPP
}
// make_last_sideeffect
CharacterVector make_last_sideeffect(CharacterVector& x, const CharacterVector& last);
RcppExport SEXP _bnclassify_make_last_sideeffect(SEXP xSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(make_last_sideeffect(x, last));
    return rcpp_result_gen;
END_RCPP
}
// normalize_ctgt
NumericVector normalize_ctgt(NumericVector& ctgt);
RcppExport SEXP _bnclassify_normalize_ctgt(SEXP ctgtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type ctgt(ctgtSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_ctgt(ctgt));
    return rcpp_result_gen;
END_RCPP
}
// count_equal
int count_equal(const RObject& a, const RObject& b);
RcppExport SEXP _bnclassify_count_equal(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(count_equal(a, b));
    return rcpp_result_gen;
END_RCPP
}
// in_rcpp
bool in_rcpp(CharacterVector element, CharacterVector vector);
RcppExport SEXP _bnclassify_in_rcpp(SEXP elementSEXP, SEXP vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type element(elementSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vector(vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(in_rcpp(element, vector));
    return rcpp_result_gen;
END_RCPP
}
// smooth_sideeffect
NumericVector smooth_sideeffect(NumericVector ctgt, double smooth);
RcppExport SEXP _bnclassify_smooth_sideeffect(SEXP ctgtSEXP, SEXP smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ctgt(ctgtSEXP);
    Rcpp::traits::input_parameter< double >::type smooth(smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_sideeffect(ctgt, smooth));
    return rcpp_result_gen;
END_RCPP
}
// exp_sideeffect
NumericVector exp_sideeffect(NumericVector p);
RcppExport SEXP _bnclassify_exp_sideeffect(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_sideeffect(p));
    return rcpp_result_gen;
END_RCPP
}
// bh_connected_components
NumericVector bh_connected_components(CharacterVector vertices, Rcpp::IntegerMatrix edges);
RcppExport SEXP _bnclassify_bh_connected_components(SEXP verticesSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_connected_components(vertices, edges));
    return rcpp_result_gen;
END_RCPP
}
// bh_remove_node
Rcpp::List bh_remove_node(const CharacterVector& vertices, const Rcpp::IntegerMatrix& edges, const CharacterVector& remove);
RcppExport SEXP _bnclassify_bh_remove_node(SEXP verticesSEXP, SEXP edgesSEXP, SEXP removeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type remove(removeSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_remove_node(vertices, edges, remove));
    return rcpp_result_gen;
END_RCPP
}
// bh_remove_edges
Rcpp::List bh_remove_edges(const CharacterVector& vertices, const Rcpp::IntegerMatrix& edges, const CharacterVector& remove_from, const CharacterVector& remove_to, const CharacterVector& edgemode);
RcppExport SEXP _bnclassify_bh_remove_edges(SEXP verticesSEXP, SEXP edgesSEXP, SEXP remove_fromSEXP, SEXP remove_toSEXP, SEXP edgemodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type remove_from(remove_fromSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type remove_to(remove_toSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type edgemode(edgemodeSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_remove_edges(vertices, edges, remove_from, remove_to, edgemode));
    return rcpp_result_gen;
END_RCPP
}
// bh_subgraph
Rcpp::List bh_subgraph(const CharacterVector& vertices, const Rcpp::IntegerMatrix& edges, const CharacterVector& subgraph_vertices);
RcppExport SEXP _bnclassify_bh_subgraph(SEXP verticesSEXP, SEXP edgesSEXP, SEXP subgraph_verticesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subgraph_vertices(subgraph_verticesSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_subgraph(vertices, edges, subgraph_vertices));
    return rcpp_result_gen;
END_RCPP
}
// bh_mstree_kruskal
Rcpp::List bh_mstree_kruskal(CharacterVector vertices, Rcpp::IntegerMatrix edges, NumericVector weights);
RcppExport SEXP _bnclassify_bh_mstree_kruskal(SEXP verticesSEXP, SEXP edgesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_mstree_kruskal(vertices, edges, weights));
    return rcpp_result_gen;
END_RCPP
}
// bh_tsort
NumericVector bh_tsort(CharacterVector vertices, Rcpp::IntegerMatrix edges);
RcppExport SEXP _bnclassify_bh_tsort(SEXP verticesSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(bh_tsort(vertices, edges));
    return rcpp_result_gen;
END_RCPP
}
// hasna_features
bool hasna_features(const DataFrame& newdata, const SEXP& features);
RcppExport SEXP _bnclassify_hasna_features(SEXP newdataSEXP, SEXP featuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type features(featuresSEXP);
    rcpp_result_gen = Rcpp::wrap(hasna_features(newdata, features));
    return rcpp_result_gen;
END_RCPP
}
// hasna
bool hasna(const DataFrame& newdata);
RcppExport SEXP _bnclassify_hasna(SEXP newdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type newdata(newdataSEXP);
    rcpp_result_gen = Rcpp::wrap(hasna(newdata));
    return rcpp_result_gen;
END_RCPP
}
// trim_dataset_cpp
DataFrame trim_dataset_cpp(const DataFrame& dataset, const CharacterVector& features);
RcppExport SEXP _bnclassify_trim_dataset_cpp(SEXP datasetSEXP, SEXP featuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type features(featuresSEXP);
    rcpp_result_gen = Rcpp::wrap(trim_dataset_cpp(dataset, features));
    return rcpp_result_gen;
END_RCPP
}
// graph_node_parents_inds
LogicalVector graph_node_parents_inds(CharacterMatrix edges, CharacterVector node);
RcppExport SEXP _bnclassify_graph_node_parents_inds(SEXP edgesSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_node_parents_inds(edges, node));
    return rcpp_result_gen;
END_RCPP
}
// test_dims2columns
IntegerVector test_dims2columns(const NumericVector cpt, const CharacterVector class_var, const CharacterVector columns_db);
RcppExport SEXP _bnclassify_test_dims2columns(SEXP cptSEXP, SEXP class_varSEXP, SEXP columns_dbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type cpt(cptSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type class_var(class_varSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type columns_db(columns_dbSEXP);
    rcpp_result_gen = Rcpp::wrap(test_dims2columns(cpt, class_var, columns_db));
    return rcpp_result_gen;
END_RCPP
}
// get_row
NumericVector get_row(List x, DataFrame df, int cptind);
RcppExport SEXP _bnclassify_get_row(SEXP xSEXP, SEXP dfSEXP, SEXP cptindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type cptind(cptindSEXP);
    rcpp_result_gen = Rcpp::wrap(get_row(x, df, cptind));
    return rcpp_result_gen;
END_RCPP
}
// fill_vector
NumericVector fill_vector(int size, int row, NumericVector rcpt, DataFrame df, CharacterVector features, std::string class_var);
RcppExport SEXP _bnclassify_fill_vector(SEXP sizeSEXP, SEXP rowSEXP, SEXP rcptSEXP, SEXP dfSEXP, SEXP featuresSEXP, SEXP class_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rcpt(rcptSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< std::string >::type class_var(class_varSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_vector(size, row, rcpt, df, features, class_var));
    return rcpp_result_gen;
END_RCPP
}
// make_cpt_object
void make_cpt_object(const NumericVector& x, std::string class_var);
RcppExport SEXP _bnclassify_make_cpt_object(SEXP xSEXP, SEXP class_varSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type class_var(class_varSEXP);
    make_cpt_object(x, class_var);
    return R_NilValue;
END_RCPP
}
// call_model_fun
Rcpp::CharacterVector call_model_fun(const Rcpp::List& x, const std::string funct);
RcppExport SEXP _bnclassify_call_model_fun(SEXP xSEXP, SEXP functSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type funct(functSEXP);
    rcpp_result_gen = Rcpp::wrap(call_model_fun(x, funct));
    return rcpp_result_gen;
END_RCPP
}
// compute_joint
NumericMatrix compute_joint(List x, DataFrame newdata);
RcppExport SEXP _bnclassify_compute_joint(SEXP xSEXP, SEXP newdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_joint(x, newdata));
    return rcpp_result_gen;
END_RCPP
}
// entry_index
int entry_index(const std::vector<int>& indices, const std::vector<int>& dim_prod);
RcppExport SEXP _bnclassify_entry_index(SEXP indicesSEXP, SEXP dim_prodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type dim_prod(dim_prodSEXP);
    rcpp_result_gen = Rcpp::wrap(entry_index(indices, dim_prod));
    return rcpp_result_gen;
END_RCPP
}
// tabulate_cpp
Rcpp::IntegerVector tabulate_cpp(const Rcpp::IntegerVector& v, R_xlen_t nlevels);
RcppExport SEXP _bnclassify_tabulate_cpp(SEXP vSEXP, SEXP nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type nlevels(nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulate_cpp(v, nlevels));
    return rcpp_result_gen;
END_RCPP
}
// table_cpp
Rcpp::IntegerVector table_cpp(const RObject& input, const RObject& columns);
RcppExport SEXP _bnclassify_table_cpp(SEXP inputSEXP, SEXP columnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type columns(columnsSEXP);
    rcpp_result_gen = Rcpp::wrap(table_cpp(input, columns));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bnclassify_find_non_reversed", (DL_FUNC) &_bnclassify_find_non_reversed, 1},
    {"_bnclassify_match_zero_based", (DL_FUNC) &_bnclassify_match_zero_based, 3},
    {"_bnclassify_ordersetdiff", (DL_FUNC) &_bnclassify_ordersetdiff, 2},
    {"_bnclassify_are_disjoint", (DL_FUNC) &_bnclassify_are_disjoint, 2},
    {"_bnclassify_normalize", (DL_FUNC) &_bnclassify_normalize, 1},
    {"_bnclassify_make_last_sideeffect", (DL_FUNC) &_bnclassify_make_last_sideeffect, 2},
    {"_bnclassify_normalize_ctgt", (DL_FUNC) &_bnclassify_normalize_ctgt, 1},
    {"_bnclassify_count_equal", (DL_FUNC) &_bnclassify_count_equal, 2},
    {"_bnclassify_in_rcpp", (DL_FUNC) &_bnclassify_in_rcpp, 2},
    {"_bnclassify_smooth_sideeffect", (DL_FUNC) &_bnclassify_smooth_sideeffect, 2},
    {"_bnclassify_exp_sideeffect", (DL_FUNC) &_bnclassify_exp_sideeffect, 1},
    {"_bnclassify_bh_connected_components", (DL_FUNC) &_bnclassify_bh_connected_components, 2},
    {"_bnclassify_bh_remove_node", (DL_FUNC) &_bnclassify_bh_remove_node, 3},
    {"_bnclassify_bh_remove_edges", (DL_FUNC) &_bnclassify_bh_remove_edges, 5},
    {"_bnclassify_bh_subgraph", (DL_FUNC) &_bnclassify_bh_subgraph, 3},
    {"_bnclassify_bh_mstree_kruskal", (DL_FUNC) &_bnclassify_bh_mstree_kruskal, 3},
    {"_bnclassify_bh_tsort", (DL_FUNC) &_bnclassify_bh_tsort, 2},
    {"_bnclassify_hasna_features", (DL_FUNC) &_bnclassify_hasna_features, 2},
    {"_bnclassify_hasna", (DL_FUNC) &_bnclassify_hasna, 1},
    {"_bnclassify_trim_dataset_cpp", (DL_FUNC) &_bnclassify_trim_dataset_cpp, 2},
    {"_bnclassify_graph_node_parents_inds", (DL_FUNC) &_bnclassify_graph_node_parents_inds, 2},
    {"_bnclassify_test_dims2columns", (DL_FUNC) &_bnclassify_test_dims2columns, 3},
    {"_bnclassify_get_row", (DL_FUNC) &_bnclassify_get_row, 3},
    {"_bnclassify_fill_vector", (DL_FUNC) &_bnclassify_fill_vector, 6},
    {"_bnclassify_make_cpt_object", (DL_FUNC) &_bnclassify_make_cpt_object, 2},
    {"_bnclassify_call_model_fun", (DL_FUNC) &_bnclassify_call_model_fun, 2},
    {"_bnclassify_compute_joint", (DL_FUNC) &_bnclassify_compute_joint, 2},
    {"_bnclassify_entry_index", (DL_FUNC) &_bnclassify_entry_index, 2},
    {"_bnclassify_tabulate_cpp", (DL_FUNC) &_bnclassify_tabulate_cpp, 2},
    {"_bnclassify_table_cpp", (DL_FUNC) &_bnclassify_table_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bnclassify(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
