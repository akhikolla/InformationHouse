// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_tree_prior_DeepState_TestHarness_generation.cpp and get_tree_prior_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double get_tree_prior(double spike_tree, int s_t_hyperprior, double p_s_t, double a_s_t, double b_s_t, double num_obs, double num_vars, double lambda_poisson, NumericMatrix tree_table, NumericMatrix tree_matrix, double alpha, double beta);

TEST(bartBMA_deepstate_test,get_tree_prior_test){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector spike_tree(1);
  spike_tree[0]  = RcppDeepState_double();
  qs::c_qsave(spike_tree,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/spike_tree.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "spike_tree values: "<< spike_tree << std::endl;
  IntegerVector s_t_hyperprior(1);
  s_t_hyperprior[0]  = RcppDeepState_int();
  qs::c_qsave(s_t_hyperprior,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/s_t_hyperprior.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "s_t_hyperprior values: "<< s_t_hyperprior << std::endl;
  NumericVector p_s_t(1);
  p_s_t[0]  = RcppDeepState_double();
  qs::c_qsave(p_s_t,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/p_s_t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p_s_t values: "<< p_s_t << std::endl;
  NumericVector a_s_t(1);
  a_s_t[0]  = RcppDeepState_double();
  qs::c_qsave(a_s_t,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/a_s_t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a_s_t values: "<< a_s_t << std::endl;
  NumericVector b_s_t(1);
  b_s_t[0]  = RcppDeepState_double();
  qs::c_qsave(b_s_t,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/b_s_t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b_s_t values: "<< b_s_t << std::endl;
  NumericVector num_obs(1);
  num_obs[0]  = RcppDeepState_double();
  qs::c_qsave(num_obs,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/num_obs.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_obs values: "<< num_obs << std::endl;
  NumericVector num_vars(1);
  num_vars[0]  = RcppDeepState_double();
  qs::c_qsave(num_vars,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/num_vars.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_vars values: "<< num_vars << std::endl;
  NumericVector lambda_poisson(1);
  lambda_poisson[0]  = RcppDeepState_double();
  qs::c_qsave(lambda_poisson,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/lambda_poisson.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_poisson values: "<< lambda_poisson << std::endl;
  NumericMatrix tree_table  = RcppDeepState_NumericMatrix();
  qs::c_qsave(tree_table,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/tree_table.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tree_table values: "<< tree_table << std::endl;
  NumericMatrix tree_matrix  = RcppDeepState_NumericMatrix();
  qs::c_qsave(tree_matrix,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/tree_matrix.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tree_matrix values: "<< tree_matrix << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  qs::c_qsave(beta,"/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/get_tree_prior/inputs/beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_tree_prior(spike_tree[0],s_t_hyperprior[0],p_s_t[0],a_s_t[0],b_s_t[0],num_obs[0],num_vars[0],lambda_poisson[0],tree_table,tree_matrix,alpha[0],beta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
